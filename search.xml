<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React</title>
      <link href="/2020/01/02/react-de-zhi-shi-chu-bei/"/>
      <url>/2020/01/02/react-de-zhi-shi-chu-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="WHAT-IS-REACT"><a href="#WHAT-IS-REACT" class="headerlink" title="WHAT IS REACT?"></a>WHAT IS REACT?</h2><p>React is a JavaScript library created by Facebook and is used for building user interfaces(UIs) and front-end applications.</p><p>React is often called a framework because of it’s behavior and capabilities.</p><p>React 应用程序的组成部分：元素和组件</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><ul><li>Components can have state which is an object that determines how that component renders and behaves</li><li>We can also have “application level” state by using a state manager like Redux or Reacts own context API. (application level state,it’s data that you want to share between multiple components) (context API which can use app level state without using third party systems like redux)</li></ul><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-react"><code class="language-react">state = {    title: 'xxx',    body: 'xxx',    isFeatured: true}</code></pre><h2 id="Create-react-app"><a href="#Create-react-app" class="headerlink" title="Create react app"></a>Create react app</h2><ul><li>CLI(命令行界面;command-line interface) Tool for creating React applications(recreate react app)</li><li>Uses Webpack but needs no configuration from you</li><li>Comes bundled with a dev server with hot reload</li><li>“npm run build” will compile all your code to something that the browser can read.</li></ul><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><pre class=" language-react"><code class="language-react">Class Post extends React.Component {    state = {    title: 'Post One',    body: 'This is my post'    }    render() {        return {            <div>                <h3>{ this.state.title}</h3>                <p>{ this.state.body}</p>            </div>                    }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
            <tag> 框架 </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2019/12/14/javascript-de-zhi-shi-chu-bei/"/>
      <url>/2019/12/14/javascript-de-zhi-shi-chu-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="Use-javascript"><a href="#Use-javascript" class="headerlink" title="Use javascript"></a>Use javascript</h2><h3 id="Directly-embedded-inside"><a href="#Directly-embedded-inside" class="headerlink" title="Directly embedded inside"></a>Directly embedded inside</h3><p>如：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Inline JS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="Placing-into-dedicated-JS-file"><a href="#Placing-into-dedicated-JS-file" class="headerlink" title="Placing into dedicated JS file"></a>Placing into dedicated JS file</h3><p>如：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>可以把JS写在多个JS文件中，然后引用它们。</p><h2 id="Script标签中的async和defer"><a href="#Script标签中的async和defer" class="headerlink" title="Script标签中的async和defer"></a>Script标签中的async和defer</h2><h3 id="普通script"><a href="#普通script" class="headerlink" title="普通script"></a>普通script</h3><p>先来看一个普通的 script 标签。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>浏览器会做如下处理</p><ul><li><p>停止解析 document.</p></li><li><p>请求 a.js</p></li><li><p>执行 a.js 中的脚本</p></li><li><p>继续解析 document</p></li></ul><p>文档解析的过程中，如果遇到<code>script</code>脚本，就会停止页面的解析进行下载（但是Chrome会做一个优化，如果遇到<code>script</code>脚本，会快速的查看后边有没有需要下载其他资源的，如果有的话，会先下载那些资源，然后再进行下载<code>script</code>所对应的资源，这样能够节省一部分下载的时间 <code>@Update: 2018-08-17</code>）。<br>资源的下载是在解析过程中进行的，虽说<code>script1</code>脚本会很快的加载完毕，但是他前边的<code>script2</code>并没有加载&amp;执行，所以他只能处于一个挂起的状态，等待<code>script2</code>执行完毕后再执行。<br>当这两个脚本都执行完毕后，才会继续解析页面。</p><p><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w8y22z5ij30gs0d0gm2.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w8y22z5ij30gs0d0gm2.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w8y22z5ij30gs0d0gm2.jpg)"></p><p><img src="https://wx3.sinaimg.cn/mw690/006AeIDuly1g9w8y683q5j319k09274r.jpg" alt="[https://wx3.sinaimg.cn/mw690/006AeIDuly1g9w8y683q5j319k09274r.jpg](https://wx3.sinaimg.cn/mw690/006AeIDuly1g9w8y683q5j319k09274r.jpg)"></p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>不阻止解析 document， 并行下载 d.js, e.js</li><li>即使下载完 d.js, e.js 仍继续解析 document</li><li>按照页面中出现的顺序，在其他同步脚本执行后，<code>DOMContentLoaded</code> 事件前 依次执行 d.js, e.js</li></ul><p>文档解析时，遇到设置了<code>defer</code>的脚本，就会在后台进行下载，但是并不会阻止文档的渲染，当页面解析&amp;渲染完毕后。<br>会等到所有的<code>defer</code>脚本加载完毕并按照顺序执行，执行完毕后会触发<code>DOMContentLoaded</code>事件。</p><p>按下图所示，对应的html中script2加载代码应该比script1的靠前。</p><p><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w8y4hze6j310o07umxi.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w8y4hze6j310o07umxi.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w8y4hze6j310o07umxi.jpg)"></p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c.js<span class="token punctuation">"</span></span> <span class="token attr-name">async</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>不阻止解析 document, 并行下载 b.js, c.js</li><li>当脚本下载完后立即执行。（两者执行顺序不确定，执行阶段不确定，可能在 <code>DOMContentLoaded</code> 事件前或者后 ）</li></ul><p><code>async</code>脚本会在加载完毕后执行。<br><code>async</code>脚本的加载不计入<code>DOMContentLoaded</code>事件统计，也就是说下图两种情况都是有可能发生的</p><p><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w9gi3dcpj310e07cwet.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w9gi3dcpj310e07cwet.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9w9gi3dcpj310e07cwet.jpg)"></p><p><img src="https://wx4.sinaimg.cn/mw690/006AeIDuly1g9w8y8d24wj30og04oglm.jpg" alt="[https://wx4.sinaimg.cn/mw690/006AeIDuly1g9w8y8d24wj30og04oglm.jpg](https://wx4.sinaimg.cn/mw690/006AeIDuly1g9w8y8d24wj30og04oglm.jpg)"></p><h3 id="async和defer-Tips"><a href="#async和defer-Tips" class="headerlink" title="async和defer Tips"></a>async和defer Tips</h3><ul><li>如果 script 无 src 属性，则 defer, async 会被忽略</li><li>动态添加的 script 标签隐含 async 属性。</li><li>defer 会在 DOMContentLoaded 前依次执行</li><li>async 则是下载完立即执行，不一定是在 DOMContentLoaded 前</li></ul><p>更详细的资料访问</p><p><a href="https://www.cnblogs.com/jiasm/p/7683930.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiasm/p/7683930.html</a></p><p><a href="https://www.jianshu.com/p/9267bb6c6006" target="_blank" rel="noopener">https://www.jianshu.com/p/9267bb6c6006</a></p><h2 id="Printing-output"><a href="#Printing-output" class="headerlink" title="Printing(output)"></a>Printing(output)</h2><h3 id="document-wirte"><a href="#document-wirte" class="headerlink" title="document.wirte()"></a>document.wirte()</h3><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。</p><p>可列出多个参数(exp1,exp2,exp3,…) ，它们将按顺序被追加到文档中。</p><p><strong><code>Document.write()</code></strong> 方法将一个文本字符串写入一个由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/open" target="_blank" rel="noopener"><code>document.open()</code></a> 打开的文档流（document stream）。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre><code>document.write(exp1,exp2,exp3,....)</code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>虽然根据 DOM 标准，该方法只接受单个字符串作为参数。不过根据经验，write() 可接受任何多个参数。</p><p>我们通常按照两种的方式使用 write() 方法：一是在使用该方在文档中输出 HTML，另一种是在调用该方法的的窗口之外的窗口、框架中产生新文档。在第二种情况中，请务必使用 close() 方法来关闭文档。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p> 因为 <code>document.write</code> 需要向文档流中写入内容，所以，若在一个已关闭（例如，已完成加载）的文档上调用 <code>document.write</code>，就会自动调用 <code>document.open</code>，这将清空该文档的内容。</p><p>不能在异步加载的JS文件中用document.write方法，会报错。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Printing</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>HELLO WORLD&lt;/h1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;hr>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;p>This is  a javascript tutorial&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//document.write('&lt;h1>HELLO WORLD&lt;/h1>','&lt;hr>','&lt;p>This is  a javascript tutorial&lt;/p>');</span></code></pre><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'This is a alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>alert() 方法用于显示带有一条指定消息和一个 OK 按钮的警告框。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre><code>alert(message)</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">message</td><td align="left">要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）</td></tr></tbody></table><h4 id="alert-TIps"><a href="#alert-TIps" class="headerlink" title="alert TIps"></a>alert TIps</h4><p>完整的写法是window.alert()，但window可以省略。</p><h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h3><h4 id="定义和用法-2"><a href="#定义和用法-2" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>console.log() 方法用于在控制台输出信息。</p><p>该方法对于开发过程进行测试很有帮助。</p><p><strong>提示:</strong> 在测试该方法的过程中，控制台需要可见 (浏览器按下 F12 打开控制台)。</p><hr><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><pre><code>console.log(message)</code></pre><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>message</em></td><td align="left">String 或 Object</td><td align="left">必需，控制台上要显示的信息。</td></tr></tbody></table><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><h3 id="javaScript-变量是存储数据值的容器。"><a href="#javaScript-变量是存储数据值的容器。" class="headerlink" title="javaScript 变量是存储数据值的容器。"></a>javaScript 变量是存储数据值的容器。</h3><p>如:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Variables</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'hwt'</span><span class="token punctuation">;</span><span class="token keyword">var</span> occupation <span class="token operator">=</span> <span class="token string">'programmer'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> pga <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span><span class="token keyword">var</span> isTall<span class="token punctuation">;</span>isTall <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">'flt'</span><span class="token punctuation">;</span></code></pre><h3 id="类似代数"><a href="#类似代数" class="headerlink" title="类似代数"></a>类似代数</h3><p>在本例中，price1、price2 以及 total 是变量：</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> price1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">var</span> price2 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">var</span> price2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> total <span class="token operator">=</span> price1 <span class="token operator">+</span> price2 <span class="token operator">+</span> price3<span class="token punctuation">;</span></code></pre><p>在编程中，类似代数，我们使用变量（比如 price1）来存放值。</p><p>在编程中，类似代数，我们在表达式中使用变量（total = price1 + price2）。</p><p>从上例中，您可以算出 total 的值是 11。</p><hr><p>字符串也可以使用加号，但是字符串将被级联：</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"Bill"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"Gates"</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"8"</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p>如果把要给数值放入引号中，其余数值会被视作字符串并被级联。</p><p>上述结果是835</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token string">"8"</span><span class="token punctuation">;</span></code></pre><p>上述结果是88</p><h3 id="JavaScript-标识符"><a href="#JavaScript-标识符" class="headerlink" title="JavaScript 标识符"></a>JavaScript 标识符</h3><p>所有 JavaScript 变量必须以唯一的名称的标识。</p><p>这些唯一的名称称为标识符。</p><ul><li>保留字（比如 JavaScript 的关键词）无法用作变量名称</li><li>JS变量名是大小写敏感的，可以用字母，$, _,开头。</li><li>之后可以包括字母，数字，$, _。</li><li>通常都用小写字母开头之后的字母都是大写。如：myFirstVariable</li></ul><h3 id="声明（创建）-JavaScript-变量"><a href="#声明（创建）-JavaScript-变量" class="headerlink" title="声明（创建） JavaScript 变量"></a>声明（创建） JavaScript 变量</h3><p>在 JavaScript 中创建变量被称为“声明”变量。</p><p>您可以通过 var 关键词来声明 JavaScript 变量：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> carName<span class="token punctuation">;</span></code></pre><p>声明之后，变量是没有值的。（技术上，它的值是 undefined。）</p><p>如需赋值给变量，请使用等号：</p><pre class=" language-javascript"><code class="language-javascript">carName <span class="token operator">=</span> <span class="token string">"porsche"</span><span class="token punctuation">;</span></code></pre><p>您可以在声明变量时向它赋值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> carName <span class="token operator">=</span> <span class="token string">"porsche"</span><span class="token punctuation">;</span></code></pre><h3 id="重复声明-JavaScript-变量"><a href="#重复声明-JavaScript-变量" class="headerlink" title="重复声明 JavaScript 变量"></a>重复声明 JavaScript 变量</h3><p>如果再次声明某个 JavaScript 变量，将不会丢它的值。</p><p>在这两条语句执行后，变量 carName 的值仍然是 “porsche”：</p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> carName <span class="token operator">=</span> <span class="token string">"porsche"</span><span class="token punctuation">;</span><span class="token keyword">var</span> carName<span class="token punctuation">;</span> </code></pre><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><strong>let</strong> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// expected output: 2</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 1</span></code></pre><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> var1 <span class="token punctuation">[</span><span class="token operator">=</span> value1<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> var2 <span class="token punctuation">[</span><span class="token operator">=</span> value2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> varN <span class="token punctuation">[</span><span class="token operator">=</span> valueN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>var1</code>, <code>var2</code>, …, <code>varN</code></p><p>变量名。必须是合法的标识符。</p></li><li><p><code>value1</code>, <code>value2</code>, …, <code>valueN</code> </p><p>变量的初始值。可以是任意合法的表达式。</p></li></ul><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p><strong><code>let</code></strong>允许你声明一个作用域被限制在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/statements/block" target="_blank" rel="noopener"><code>块</code></a>级中的变量、语句或者表达式。与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/statements/var" target="_blank" rel="noopener"><code>var</code></a> 关键字不同的是， <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/statements/var" target="_blank" rel="noopener"><code>var</code></a>声明的变量只能是全局或者整个函数块的。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/statements/var" target="_blank" rel="noopener"><code>var</code></a> 和 <code>let</code> 的不同之处在于后者是在编译时才初始化（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let#暂存死区" target="_blank" rel="noopener">见下面</a>）。</p><p>就像<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/statements/const#Description" target="_blank" rel="noopener"><code>const</code></a> 一样，<code>let</code>不会在全局声明时（在最顶部的范围）创建<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noopener"><code>window</code></a> 对象的属性。</p><p>可以从<a href="https://stackoverflow.com/questions/37916940/js-why-let-have-this-name" target="_blank" rel="noopener">这里</a>了解我们为什么使用“<strong>let</strong>”。</p><h4 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h4><p><code>**let**</code>声明的变量只在其声明的块或子块中可用，这一点，与<code>**var**</code>相似。二者之间最主要的区别在于<code>**var**</code>声明的变量的作用域是整个封闭函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">varTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 同样的变量!</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">letTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不同的变量</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">}</span></code></pre><p>在程序和方法的最顶端，<strong><code>let</code></strong>不像 <strong><code>var</code></strong> 一样，<strong><code>let</code></strong>不会在全局对象里新建一个属性。比如：</p><p>位于函数或代码顶部的<strong><code>var</code></strong>声明会给全局对象新增属性, 而<strong><code>let</code></strong>不会。例如:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "global"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><h4 id="模仿私有成员"><a href="#模仿私有成员" class="headerlink" title="模仿私有成员"></a>模仿私有成员</h4><p>在处理<a href="https://developer.mozilla.org/en-US/docs/Glossary/Constructor" target="_blank" rel="noopener">构造函数</a>的时候，可以通过<code>**let**</code>声明而不是闭包来创建一个或多个私有成员。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Thing<span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> privateScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  Thing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>someProperty <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>    privateScope<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      hidden<span class="token punctuation">:</span> <span class="token operator">++</span>counter<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Thing<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showPublic <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someProperty<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Thing<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showPrivate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> privateScope<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> privateScope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "undefined"</span><span class="token keyword">var</span> thing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Thing {someProperty: "foo"}</span>thing<span class="token punctuation">.</span><span class="token function">showPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "foo"</span>thing<span class="token punctuation">.</span><span class="token function">showPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span></code></pre><p>可以使用<code>var</code>创建和闭包具有相同隐私模式的局部变量，但是它们需要函数作用域（通常是模块模式中的IIFE），而不仅仅是上面示例中的块作用域。</p><h4 id="重复声明"><a href="#重复声明" class="headerlink" title="重复声明"></a>重复声明</h4><p>在同一个函数或块作用域中重复声明同一个变量会引起<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a>。</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> foo<span class="token punctuation">;</span>  <span class="token keyword">let</span> foo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError thrown.</span><span class="token punctuation">}</span></code></pre><p>在 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/switch" target="_blank" rel="noopener"><code>switch</code></a> 语句中只有一个块，你可能因此而遇到错误。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">let</span> foo<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">let</span> foo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError for redeclaration.</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然而，需要特别指出的是，一个嵌套在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误。</p><pre class=" language-html"><code class="language-html">let x = 1;switch(x) {  case 0: {    let foo;    break;  }    case 1: {    let foo;    break;  }}</code></pre><h4 id="暂存死区"><a href="#暂存死区" class="headerlink" title="暂存死区"></a>暂存死区</h4><p>与通过  <code>var</code> 声明的有初始化值 <code>undefined</code> 的变量不同，通过 <code>let</code> 声明的变量直到它们的定义被执行时才初始化。在变量初始化前访问该变量会导致 <code>ReferenceError</code>。该变量处在一个自块顶部到初始化处理的“暂存死区”中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="暂存死区与-typeof"><a href="#暂存死区与-typeof" class="headerlink" title="暂存死区与 typeof"></a>暂存死区与 <code>typeof</code></h4><p>与通过<code>var</code>声明的变量, 有初始化值 <code>undefined</code>和只是未声明的变量不同的是，如果使用<code>typeof</code>检测在暂存死区中的变量, 会抛出<code>ReferenceError</code>异常:</p><pre><code>// prints out &#39;undefined&#39;console.log(typeof undeclaredVariable);// results in a &#39;ReferenceError&#39;console.log(typeof i);let i = 10;</code></pre><h4 id="暂存死区和静态作用域-詞法作用域的相关例子"><a href="#暂存死区和静态作用域-詞法作用域的相关例子" class="headerlink" title="暂存死区和静态作用域/詞法作用域的相关例子"></a>暂存死区和静态作用域/詞法作用域的相关例子</h4><p>由于词法作用域，表达式<code>(foo + 55)</code>内的标识符<code>foo</code>被认为是if块的foo变量，而不是值为33的块外面的变量foo。</p><p>在同一行，这个if块中的<code>foo</code>已经在词法环境中被创建了，但是还没有到达（或者终止）它的初始化（这是语句本身的一部分）。</p><p>这个if块里的<code>foo</code>还依旧在暂存死区里。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>   <span class="token punctuation">{</span>      <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>foo <span class="token operator">+</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在以下情况下，这种现象可能会使您感到困惑。 <code>let n of n.a</code>已经在for循环块的私有范围内。因此，标识符<code>n.a</code>被解析为位于指令本身(“let n”)中的“ n”对象的属性“ a”。</p><p>在没有执行到它的初始化语句之前，它仍旧存在于暂存死区中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// n here is defined!</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object {a: [1,2,3]}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> n<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ReferenceError</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h4><p>用在块级作用域中时, <strong><code>let</code></strong>将变量的作用域限制在块内, 而<code>**var**</code>声明的变量的作用域是在函数内.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the scope is global</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the scope is inside the if-block</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 11</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 22</span><span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>而这种<code>**var**</code> 与 <strong><code>let</code></strong>合并的声明方式会报<code>SyntaxError</code>错误, 因为<code>**var**</code>会将变量提升至块的顶部, 这会导致隐式地重复声明变量.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError for re-declaration</span><span class="token punctuation">}</span></code></pre><p>更多let语句的资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let</a></p><h2 id="const-常量"><a href="#const-常量" class="headerlink" title="const 常量"></a>const 常量</h2><p>常量是块级作用域，很像使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">let</a> 语句定义的变量。常量的值不能通过重新赋值来改变，并且不能重新声明。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  number <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// expected output: TypeError: invalid assignment to const `number'</span>  <span class="token comment" spellcheck="true">// Note - error messages will vary depending on browser</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 42</span></code></pre><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>此声明创建一个常量，其作用域可以是全局或本地声明的块。 与<code>var</code>变量不同，全局常量不会变为窗口对象的属性。需要一个常数的初始化器；也就是说，您必须在声明的同一语句中指定它的值（这是有道理的，因为以后不能更改）。</p><p><strong><code>const</code>**</strong>声明**创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。</p><p>关于“<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let" target="_blank" rel="noopener">暂存死区</a>”的所有讨论都适用于<code>let</code>和<code>const</code>。</p><p>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面的例子演示了常量的特性。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注意: 常量在声明的时候可以使用大小写，但通常情况下全部用大写字母。 </span><span class="token comment" spellcheck="true">// 定义常量MY_FAV并赋值7</span><span class="token keyword">const</span> MY_FAV <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span>MY_FAV <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 7</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"my favorite number is: "</span> <span class="token operator">+</span> MY_FAV<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 尝试重新声明会报错 </span><span class="token keyword">const</span> MY_FAV <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  MY_FAV 保留给上面的常量，这个操作会失败</span><span class="token keyword">var</span> MY_FAV <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 也会报错</span><span class="token keyword">let</span> MY_FAV <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意块范围的性质很重要</span><span class="token keyword">if</span> <span class="token punctuation">(</span>MY_FAV <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 没问题，并且创建了一个块作用域变量 MY_FAV</span>    <span class="token comment" spellcheck="true">// (works equally well with let to declare a block scoped non const variable)</span>    <span class="token keyword">let</span> MY_FAV <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// MY_FAV 现在为 20</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my favorite number is '</span> <span class="token operator">+</span> MY_FAV<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这被提升到全局上下文并引发错误</span>    <span class="token keyword">var</span> MY_FAV <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MY_FAV 依旧为7</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"my favorite number is "</span> <span class="token operator">+</span> MY_FAV<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 常量要求一个初始值</span><span class="token keyword">const</span> FOO<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError: missing = in const declaration</span><span class="token comment" spellcheck="true">// 常量可以定义成对象</span><span class="token keyword">const</span> MY_OBJECT <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重写对象和上面一样会失败</span>MY_OBJECT <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"OTHER_KEY"</span><span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对象属性并不在保护的范围内，下面这个声明会成功执行</span>MY_OBJECT<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token string">"otherValue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以用来定义数组</span><span class="token keyword">const</span> MY_ARRAY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// It's possible to push items into the array</span><span class="token comment" spellcheck="true">// 可以向数组填充数据</span>MY_ARRAY<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["A"]</span><span class="token comment" spellcheck="true">// 但是，将一个新数组赋给变量会引发错误</span>MY_ARRAY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span></code></pre><p>更多关于const的资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const</a></p><h2 id="浅比较和深比较"><a href="#浅比较和深比较" class="headerlink" title="浅比较和深比较"></a>浅比较和深比较</h2><h3 id="浅比较"><a href="#浅比较" class="headerlink" title="浅比较"></a>浅比较</h3><p><code>浅比较</code>也称引用相等，在<code>javascript</code>中， <code>===</code>是作<code>浅比较</code>,只检查左右两边是否是同一个对象的<code>引用</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// false</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>m <span class="token operator">===</span> n <span class="token comment" spellcheck="true">//true</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">changeValue</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  params<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> params<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">changeValue</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">===</span> n <span class="token comment" spellcheck="true">//true</span>m <span class="token comment" spellcheck="true">//{a:2}</span>n <span class="token comment" spellcheck="true">//{a:2}</span>ps<span class="token punctuation">:</span> 这里<span class="token template-string"><span class="token string">`changeValue`</span></span>方法直接修改了传入的参数<span class="token template-string"><span class="token string">`params`</span></span>，这么做造成的后果是把  <span class="token template-string"><span class="token string">`m`</span></span>的值也改变了（因为javascript中，基本类型是传值调用，引用类型是传引用调用）所以这种做法在<span class="token template-string"><span class="token string">`webstrom`</span></span>中也会有警告，尽量不要这么做<span class="token punctuation">;</span></code></pre><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p><p>这种引用只局限于对象，如果两个变量指向同一个<code>原始类型的值</code>。那么，变量这时都是值的拷贝。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//true</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>m <span class="token operator">===</span> n <span class="token comment" spellcheck="true">//true</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>m <span class="token operator">===</span> n <span class="token comment" spellcheck="true">//true</span></code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token keyword">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">params</span> <span class="token operator">=</span> <span class="token keyword">params</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">params</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">changeValue</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">===</span> n <span class="token comment" spellcheck="true">//false</span>m <span class="token comment" spellcheck="true">//1</span>n <span class="token comment" spellcheck="true">//2</span></code></pre><h3 id="深比较"><a href="#深比较" class="headerlink" title="深比较"></a>深比较</h3><p><code>深比较</code>也称原值相等，深比较是指检查两个<code>对象</code>的<code>所有属性</code>是否<code>都相等</code>,<code>深比较</code>需要以递归的方式遍历两个对象的所有属性，操作比较耗时，<code>深比较</code>不管这两个对象是不是同一对象的引用。<br> <code>javascript</code>没有提供深比较的api，需要自己实现，网上有很多，具体查一下吧</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">deepEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//假设这是深比较的具体实现 </span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>只要两个对象的所有属性都相等，深比较就返回<span class="token boolean">true</span></code></pre><p>摘自:<a href="https://www.jianshu.com/p/06a78b66c3a2" target="_blank" rel="noopener">https://www.jianshu.com/p/06a78b66c3a2</a></p><h2 id="Casting-amp-Converting-类型转换"><a href="#Casting-amp-Converting-类型转换" class="headerlink" title="Casting &amp; Converting 类型转换"></a>Casting &amp; Converting 类型转换</h2><p>如:</p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'25'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'50.99'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>结果<span class="token punctuation">:</span><span class="token number">125</span><span class="token number">150</span><span class="token number">150.99</span></code></pre><p>更详细的js类型转换资料访问:<a href="https://www.runoob.com/js/js-type-conversion.html" target="_blank" rel="noopener">https://www.runoob.com/js/js-type-conversion.html</a></p><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// indexes: 01234</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'llo'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从2开始一直到末尾</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>结果<span class="token punctuation">:</span><span class="token number">5</span>H<span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>lloel</code></pre><hr><p>String全局对象是一个用于字符串或一个字符序列的构造函数。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>字符串字面量采取以下形式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'string text'</span> <span class="token string">"string text"</span><span class="token string">"中文/汉语"</span> <span class="token string">"español"</span><span class="token string">"English "</span><span class="token string">"हिन्दी"</span><span class="token string">"العربية"</span><span class="token string">"português"</span><span class="token string">"বাংলা"</span><span class="token string">"русский"</span> <span class="token string">"日本語"</span><span class="token string">"ਪੰਜਾਬੀ"</span><span class="token string">"한국어"</span></code></pre><p>你也能使用 <code>String</code> 函数将其他值生成或转换成字符串：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">String</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span></code></pre><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>thing : 任何可以被转换成字符串的值。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>除了普通的可打印字符以外，一些特殊有特殊功能的字符可以通过转义字符的形式放入字符串中：</p><table><thead><tr><th align="left">Code</th><th align="left">Output</th></tr></thead><tbody><tr><td align="left"><code>\0</code></td><td align="left">空字符</td></tr><tr><td align="left"><code>\&#39;</code></td><td align="left">单引号</td></tr><tr><td align="left"><code>\&quot;</code></td><td align="left"><code>双引号</code></td></tr><tr><td align="left"><code>\\</code></td><td align="left">反斜杠</td></tr><tr><td align="left"><code>\n</code></td><td align="left">换行</td></tr><tr><td align="left"><code>\r</code></td><td align="left"><code>回车</code></td></tr><tr><td align="left"><code>\v</code></td><td align="left">垂直制表符</td></tr><tr><td align="left"><code>\t</code></td><td align="left">水平制表符</td></tr><tr><td align="left"><code>\b</code></td><td align="left">退格</td></tr><tr><td align="left"><code>\f</code></td><td align="left">换页</td></tr><tr><td align="left"><code>\uXXXX</code></td><td align="left">unicode 码</td></tr><tr><td align="left"><code>\u{X}</code> … <code>\u{XXXXXX}</code></td><td align="left">unicode codepoint</td></tr><tr><td align="left"><code>\xXX</code></td><td align="left">Latin-1 字符(x小写)</td></tr></tbody></table><h3 id="String-Tips"><a href="#String-Tips" class="headerlink" title="String Tips:"></a>String Tips:</h3><p>和其他语言不同，javascript 的字符串不区分单引号和双引号，所以不论是单引号还是双引号的字符串，上面的转义字符都能运行 。</p><h3 id="长字符串"><a href="#长字符串" class="headerlink" title="长字符串"></a>长字符串</h3><p>有时，你的代码可能含有很长的字符串。你可能想将这样的字符串写成多行，而不是让这一行无限延长或着被编辑器折叠。有两种方法可以做到这一点。</p><p>其一，可以使用 + 运算符将多个字符串连接起来，如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> longString <span class="token operator">=</span> <span class="token string">"This is a very long string which needs "</span> <span class="token operator">+</span>                 <span class="token string">"to wrap across multiple lines because "</span> <span class="token operator">+</span>                 <span class="token string">"otherwise my code is unreadable."</span><span class="token punctuation">;</span></code></pre><p>其二，可以在每行末尾使用反斜杠字符（“\”），以指示字符串将在下一行继续。确保反斜杠后面没有空格或任何除换行符之外的字符或缩进; 否则反斜杠将不会工作。 如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> longString <span class="token operator">=</span> <span class="token string">"This is a very long string which needs \to wrap across multiple lines because \otherwise my code is unreadable."</span><span class="token punctuation">;</span></code></pre><p>使用这两种方式会创建相同的字符串。</p><h3 id="从字符串中获取单个字符"><a href="#从字符串中获取单个字符" class="headerlink" title="从字符串中获取单个字符"></a>从字符串中获取单个字符</h3><p>获取字符串的某个字符有两种方法。 第一种是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noopener"><code>charAt</code></a> 方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token string">'cat'</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns "a"</span></code></pre><p>另一种 (在ECMAScript 5中有所介绍) 是把字符串当作一个类似数组的对象，其中的每个字符对应一个数值索引：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token string">'cat'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns "a"</span></code></pre><p>使用括号访问字符串不可以对其进行删除或添加，因为字符串对应未知的属性并不是可读或配置的。</p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>熟练使用 C 语言的开发者经常使用 <code>strcmp</code> 函数来比较字符串，但在 JavaScript 中，你只需要使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators" target="_blank" rel="noopener">比较操作符(&gt;/=/&lt;=)</a>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">" is less than "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>  <span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">" is greater than "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>  <span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" are equal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用从字符串实例继承而来的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener"><code>localeCompare</code></a> 方法也能达到同样的效果。 </p><h3 id="基本字符串和字符串对象的区别"><a href="#基本字符串和字符串对象的区别" class="headerlink" title="基本字符串和字符串对象的区别"></a>基本字符串和字符串对象的区别</h3><p>请注意区分 JavaScript 字符串对象和基本字符串值 . ( 对于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a> 和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener"><code>Numbers</code></a> 也同样如此.)</p><p>字符串字面量 (通过单引号或双引号定义) 和 直接调用 String 方法(没有通过 new 生成字符串对象实例)的字符串都是基本字符串。JavaScript会自动将基本字符串转换为字符串对象，只有将基本字符串转化为字符串对象之后才可以使用字符串对象的方法。当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候(基本字符串是没有这些方法的)，JavaScript 会自动将基本字符串转化为字符串对象并且调用相应的方法或者执行查询。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s_prim <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token keyword">var</span> s_obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>s_prim<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s_prim<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Logs "string"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Logs "object"</span></code></pre><p>当使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener"><code>eval</code></a>时，基本字符串和字符串对象也会产生不同的结果。<code>eval</code> 会将基本字符串作为源代码处理; 而字符串对象则被看作对象处理, 返回对象。 例如：</p><pre class=" language-js"><code class="language-js">s1 <span class="token operator">=</span> <span class="token string">"2 + 2"</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// creates a string primitive</span>s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"2 + 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// creates a String object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// returns the number 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// returns the string "2 + 2"</span></code></pre><p>由于上述原因, 当一段代码在需要使用基本字符串的时候却使用了字符串对象就会导致执行失败(虽然一般情况下程序员们并不需要考虑这样的问题)。</p><p>利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf" target="_blank" rel="noopener"><code>valueOf</code></a> 方法，我们可以将字符串对象转换为其对应的基本字符串。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns the number 4</span></code></pre><p>更详细的string资料可以访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></p><h2 id="ECMAScript与JavaScript的关系"><a href="#ECMAScript与JavaScript的关系" class="headerlink" title="ECMAScript与JavaScript的关系"></a>ECMAScript与JavaScript的关系</h2><p>彻底搞清ECMAScript与JavaScirpt 的关系<br>ECMAScript 是JavaScript的规范，JavaScript是ECMAScript的一种实现，在日常场合，这两个词是可以互换的。JavaSript的创造者Netscape公司，将JavaSript提交给国际标准化组织ECMA，希望这种语言能够成为国际标准，后来ECMA发布标准文件的第一版（ECMA-262)，规定了浏览器脚本语言的标准，并将这种语言成为ECMAScript。该标准从一开始就是针对JavaScirpt语言制定的，之所以不叫JavaScript，有两个原因：一是商标，Java是Sun公司的商标，根据授权协议，只有Netscape公司可以合法地使用JavaScirpt这个名字，且JavaScript本身也已经被Netscape公司注册为商标；二是想体现这门语言的制定者是ECMA，不是Netscape，有利于保证这门语言的开放性和中立性。但事实上，JavaScript比ECMA-262含义多得多，一个完整的JavaScript实现应该有以下三部分组成：<br>ECMAScirpt：核心<br>DOM：文档对象模型<br>BOM:浏览器对象模型</p><p>ECMAScript是JS的核心部分，是一种脚本在语法和语义上的标准，充当翻译的角色。 ECMAScript又包含哪些部分呢？</p><p><img src="https://img-blog.csdnimg.cn/20190418103803518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVyYXJ5Z2lybA==,size_16,color_FFFFFF,t_70" alt="img"></p><p><a href="https://img-blog.csdnimg.cn/20190418103803518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVyYXJ5Z2lybA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20190418103803518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVyYXJ5Z2lybA==,size_16,color_FFFFFF,t_70</a></p><p>数据类型</p><p><img src="https://img-blog.csdnimg.cn/20190418150517758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVyYXJ5Z2lybA==,size_16,color_FFFFFF,t_70" alt="img"></p><p><a href="https://img-blog.csdnimg.cn/20190418150517758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVyYXJ5Z2lybA==,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20190418150517758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdGVyYXJ5Z2lybA==,size_16,color_FFFFFF,t_70</a></p><p>原文链接：<a href="https://blog.csdn.net/literarygirl/article/details/89373390" target="_blank" rel="noopener">https://blog.csdn.net/literarygirl/article/details/89373390</a></p><h2 id="Math-amp-Numbers"><a href="#Math-amp-Numbers" class="headerlink" title="Math &amp; Numbers"></a>Math &amp; Numbers</h2><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2的3次方</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//js与一般语言不同,10/3.0或10/3结果都是3.33333335</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//-=, /=, *=</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// --</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">'&lt;br/>&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>结果<span class="token punctuation">:</span><span class="token number">6</span><span class="token number">8</span><span class="token number">1</span><span class="token number">7</span><span class="token number">3.3333333333333335</span><span class="token number">110</span><span class="token number">111</span><span class="token number">8</span><span class="token number">12</span><span class="token number">3</span></code></pre><p>更多的Math对象属性与对象方法访问:<a href="https://www.w3school.com.cn/js/jsref_obj_math.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/js/jsref_obj_math.asp</a></p><h2 id="User-Input"><a href="#User-Input" class="headerlink" title="User Input"></a>User Input</h2><h3 id="prompt："><a href="#prompt：" class="headerlink" title="prompt："></a>prompt：</h3><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// User Input</span><span class="token keyword">var</span> name <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'Enter your name:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Youer name is'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>上述js代码能让浏览器弹出一个弹窗，弹窗中显示只读文本<span class="token string">'Enter your name:'</span>其下方还有一个文本框，向文本框中输入字符串后点击确定会弹出第二个弹窗显示<span class="token string">'Youer name is'</span> <span class="token operator">+</span> name</code></pre><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="1维数组例子"><a href="#1维数组例子" class="headerlink" title="1维数组例子:"></a>1维数组例子:</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Array</span><span class="token comment" spellcheck="true">// var LuckyNumbers = [];</span><span class="token keyword">var</span> luckyNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"twenty"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>luckyNumbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>luckyNumbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>luckyNumbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>luckyNumbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>js的数组能存储数字和字符串</code></pre><h3 id="N-Dimensional-Array"><a href="#N-Dimensional-Array" class="headerlink" title="N Dimensional Array"></a>N Dimensional Array</h3><h4 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numberGrid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numberGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>numberGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>numberGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出<span class="token punctuation">:</span><span class="token number">1</span><span class="token number">99</span></code></pre><h3 id="Array-Functions"><a href="#Array-Functions" class="headerlink" title="Array Functions"></a>Array Functions</h3><h4 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Oscar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Angela'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加元素到数组的末尾</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>friends <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>friends<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Angela'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//找出某个元素在数组中的索引</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>friends<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>friends<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>friends<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出Oscar<span class="token punctuation">,</span>Angela<span class="token punctuation">,</span>Kevin<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>Kevin<span class="token punctuation">,</span>Angela<span class="token punctuation">,</span>OscarAngela<span class="token punctuation">,</span>Kevin<span class="token punctuation">,</span>Oscar</code></pre><h4 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noopener"><code>Array.prototype.pop()</code></a></h4><p>删除数组的最后一个元素，并返回这个元素。</p><h4 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener"><code>Array.prototype.push()</code></a></h4><p>在数组的末尾增加一个或多个元素，并返回数组的新长度。</p><h4 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener"><code>Array.prototype.reverse()</code></a></h4><p>颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</p><h4 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener"><code>Array.prototype.sort()</code></a></h4><p>对数组元素进行排序，并返回当前数组</p><h4 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener"><code>Array.prototype.indexOf()</code></a></h4><p>返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</p><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><p><code>**map()**</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><h4 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pass a function to map</span><span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: Array [2, 8, 18, 32]</span></code></pre><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><pre><code>var new_array = arr.map(function callback(currentValue[, index[, array]]) { // Return element for new_array }[, thisArg])</code></pre><h5 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>callback</code></p><p>生成新数组元素的函数，使用三个参数：<code>currentValue``callback</code> 数组中正在处理的当前元素。<code>index</code>可选<code>callback</code> 数组中正在处理的当前元素的索引。<code>array</code>可选<code>map</code> 方法调用的数组。</p></li><li><p><code>thisArg</code>可选</p><p>执行 <code>callback</code> 函数时值被用作<code>this</code>。</p></li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>回调函数的结果组成了新数组的每一个元素。</p><p>更详细的Array.prototype.map()资料访问；</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></p><p>更多关于js数组的资料访问：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><h2 id="js类数组对象与arguments-参数列表"><a href="#js类数组对象与arguments-参数列表" class="headerlink" title="js类数组对象与arguments(参数列表)"></a>js类数组对象与arguments(参数列表)</h2><h3 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h3><blockquote><p>简单来说，和数组类似，拥有length属性，可以通过索引来访问或设置里面的元素，但是不能使用数组的方法。</p></blockquote><pre class=" language-css"><code class="language-css">arr[<span class="token number">0</span>]</code></pre><p>这里的arr一定是一个数组吗？不一定，也可能是一个对象。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'dazhi'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dazhi</span></code></pre><p><strong>注意，这边arrLike必须加上length属性，不然它就是一个普通对象而已</strong><br> 为什么叫做类数组对象呢， 我们从读写，获取长度，遍历这三个方面来看看这两个对象</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个类数组对象</span>        <span class="token comment" spellcheck="true">// 这边arrLike必须加上length属性，不然它就是一个普通对象而已。</span>        <span class="token keyword">let</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'job'</span><span class="token punctuation">,</span>            length<span class="token punctuation">:</span> <span class="token number">3</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 读</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name</span>        <span class="token comment" spellcheck="true">// 写</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'new name'</span><span class="token punctuation">;</span>        arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'new name'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new name</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new name</span>        <span class="token comment" spellcheck="true">// 获取长度</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// name </span>        <span class="token comment" spellcheck="true">// age </span>        <span class="token comment" spellcheck="true">// job</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arrLike<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// name </span>        <span class="token comment" spellcheck="true">// age </span>        <span class="token comment" spellcheck="true">// job</span>        <span class="token comment" spellcheck="true">// 如果用数组的方法</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// arrLike.push('gender');  // 报错 Uncaught TypeError: arrLike.push is not a function，  需要转换为数组</span></code></pre><h6 id="转换为数组的方法"><a href="#转换为数组的方法" class="headerlink" title="转换为数组的方法"></a>转换为数组的方法</h6><p><strong>1. slice</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// slice 返回一个新数组</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["name", "age", "job"]</span></code></pre><p><strong>2. splice</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// splice </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["name", "age", "job"]</span></code></pre><p><strong>3. ES6 Array.from</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// from </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>4. apply</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// apply</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Arguments 对象就是一个类数组对象。 在客户端JavaScript中，一些DOM方法（document.getElementsByTagName()等）也返回类数组对象。</p><h3 id="Arguments对象"><a href="#Arguments对象" class="headerlink" title="Arguments对象"></a>Arguments对象</h3><p>Arguments 对象只定义在函数体重，包括了函数的参数和其他属性。 在函数体重，arguments 指该函数的Arguments 对象。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">)</span></code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/15216392-c14d48ea228fb9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/954/format/webp" alt="img"></p><h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><p> Arguments对象的length属性，表示实参的长度</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"实参的长度为："</span> <span class="token operator">+</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"形参的长度为："</span> <span class="token operator">+</span> foo<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 形参的长度为：3</span>        <span class="token comment" spellcheck="true">// 实参的长度为：1</span></code></pre><h4 id="callee属性"><a href="#callee属性" class="headerlink" title="callee属性"></a><strong>callee属性</strong></h4><p> Arguments 对象的callee属性，通过它可以调用函数自身。</p><p>arguments和对应参数的绑定</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// "use strict";</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 1</span>    <span class="token comment" spellcheck="true">// 改变形参</span>    a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11 11</span>    <span class="token comment" spellcheck="true">// 改变arguments</span>    arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 22 22</span>    <span class="token comment" spellcheck="true">// 未传入的参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 undefined</span>    arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined 4</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a><strong>传递参数</strong></h4><p> 将参数从一个函数传递到另一个函数</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bar<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1 2 3</span></code></pre><h4 id="arguments转为数组"><a href="#arguments转为数组" class="headerlink" title="arguments转为数组"></a><strong>arguments转为数组</strong></h4><p> arguments 除了可以用上面几个转为数组的方法，还可以使用ES6的…展开符</p><pre class=" language-none"><code class="language-none">function bar(a, b) {  // 用...把argumens转为数组  console.log([...arguments]); // [1, 2]}bar(1, 2);</code></pre><p>来源：<a href="https://www.jianshu.com/p/dc0779b1c448" target="_blank" rel="noopener">https://www.jianshu.com/p/dc0779b1c448</a></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>new Map([iterable])</code></pre><h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><ul><li><p><code>iterable</code></p><p>Iterable 可以是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>数组</code></a>或者其他 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/iterable" target="_blank" rel="noopener">iterable</a> 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。<code>null</code> 会被当做 <code>undefined。</code></p></li></ul><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 ; 一个  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener"><code>for...of</code></a> 循环在每次迭代后会返回一个形式为[key，value]的数组。</p><h3 id="键的相等-Key-equality"><a href="#键的相等-Key-equality" class="headerlink" title="键的相等(Key equality)"></a>键的相等(Key equality)</h3><ul><li>键的比较是基于 <code>sameValueZero</code> 算法：</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a> 是与 <code>NaN</code> 相等的（虽然 <code>NaN !== NaN</code>），剩下所有其它的值是根据 <code>===</code> 运算符的结果判断是否相等。</li><li>在目前的ECMAScript规范中，<code>-0</code>和<code>+0</code>被认为是相等的，尽管这在早期的草案中并不是这样。有关详细信息，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#浏览器兼容性" target="_blank" rel="noopener">浏览器兼容性</a> 表中的“Value equality for -0 and 0”。</li></ul><h3 id="Objects-和-maps-的比较"><a href="#Objects-和-maps-的比较" class="headerlink" title="Objects 和 maps 的比较"></a>Objects 和 maps 的比较</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener"><code>Objects</code></a> 和 <code>Maps</code> 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 <code>Maps</code> 使用。不过 <code>Maps</code> 和 <code>Objects</code> 有一些重要的区别，在下列情况里使用 <code>Map</code> 会是更好的选择：</p><ul><li>一个<code>Object</code>的键只能是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>字符串</code></a>或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener"><code>Symbols</code></a>，但一个 <code>Map</code> 的键可以是<strong>任意值</strong>，包括函数、对象、基本类型。</li><li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li></ul><p>注意：自ECMAScript 2015规范以来，对象<em>确实</em>保留了字符串和Symbol键的创建顺序； 因此，在只有字符串键的对象上进行迭代将按插入顺序产生键。</p><ul><li>你可以通过 <code>size</code> 属性直接获取一个 <code>Map</code> 的键值对个数，而 <code>Object</code> 的键值对个数只能手动计算。</li><li><code>Map</code> 可直接进行迭代，而 <code>Object</code> 的迭代需要先获取它的键数组，然后再进行迭代。</li><li><code>Object</code> 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</li></ul><p>注意：虽然 ES5 开始可以用 <code>map = Object.create(null)</code> 来创建一个没有原型的对象，但是这种用法不太常见。</p><ul><li><code>Map</code> 在涉及频繁增删键值对的场景下会有些性能优势。</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><p><code>Map.length</code></p><p>属性 length 的值为 0 。 想要计算一个<code>Map</code> 中的条目数量， 使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size" target="_blank" rel="noopener"><code>Map.prototype.size</code></a>.</p></li><li><p>[<code>get Map[@@species\]</code>] 本构造函数用于创建派生对象。</p><p>更详细的该属性信息访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype" target="_blank" rel="noopener"><code>Map.prototype</code></a></p><p>表示 <code>Map</code> 构造器的原型。 允许添加属性从而应用于所有的 <code>Map</code> 对象。</p></li></ul><h3 id="Map-实例"><a href="#Map-实例" class="headerlink" title="Map 实例"></a><code>Map</code> 实例</h3><p>所有的 <code>Map</code> 对象实例都会继承 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype" target="_blank" rel="noopener"><code>Map.prototype</code></a>。</p><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li><p><code>Map.prototype.constructor</code></p><p>返回一个函数，它创建了实例的原型。默认是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Map" target="_blank" rel="noopener"><code>Map</code></a>函数。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size" target="_blank" rel="noopener"><code>Map.prototype.size</code></a></p><p>返回Map对象的键/值对的数量。</p></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear" target="_blank" rel="noopener"><code>Map.prototype.clear()</code></a></p><p>移除Map对象的所有键/值对 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete" target="_blank" rel="noopener"><code>Map.prototype.delete(key)</code></a></p><p>如果 <code>Map</code> 对象中存在该元素，则移除它并返回 <em><code>true</code></em>；否则如果该元素不存在则返回 <code>*false*</code>。随后调用 <code>Map.prototype.has(key)</code> 将返回 <code>false</code> 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries" target="_blank" rel="noopener"><code>Map.prototype.entries()</code></a></p><p>返回一个新的 <code>Iterator</code> 对象，它按插入顺序包含了Map对象中每个元素的 <strong><code>[key, value]</code></strong> <code>**数组**</code>。</p></li><li><p><code>Map.prototype.forEach(callbackFn[, thisArg\])</code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach</a></p><p>按插入顺序，为 <code>Map</code>对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get" target="_blank" rel="noopener"><code>Map.prototype.get(key)</code></a></p><p>返回键对应的值，如果不存在，则返回undefined。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has" target="_blank" rel="noopener"><code>Map.prototype.has(key)</code></a></p><p>返回一个布尔值，表示Map实例是否包含键对应的值。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys" target="_blank" rel="noopener"><code>Map.prototype.keys()</code></a></p><p>返回一个新的 <code>Iterator</code>对象， 它按插入顺序包含了Map对象中每个元素的<strong>键</strong> 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set" target="_blank" rel="noopener"><code>Map.prototype.set(key, value)</code></a></p><p>设置Map对象中键的值。返回该Map对象。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values" target="_blank" rel="noopener"><code>Map.prototype.values()</code></a></p><p>返回一个新的<code>Iterator</code>对象，它按插入顺序包含了Map对象中每个元素的<strong>值</strong> 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator" target="_blank" rel="noopener"><code>Map.prototype[@@iterator]()</code></a></p><p>返回一个新的<code>Iterator</code>对象，它按插入顺序包含了Map对象中每个元素的 <strong><code>[key, value]</code></strong> <code>**数组**</code>。</p></li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><h4 id="使用-Map-对象"><a href="#使用-Map-对象" class="headerlink" title="使用 Map 对象"></a>使用 <code>Map</code> 对象</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> keyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> keyFunc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> keyString <span class="token operator">=</span> <span class="token string">'a string'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加键</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyString<span class="token punctuation">,</span> <span class="token string">"和键'a string'关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">,</span> <span class="token string">"和键keyObj关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyFunc<span class="token punctuation">,</span> <span class="token string">"和键keyFunc关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 读取值</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "和键'a string'关联的值"</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// "和键keyObj关联的值"</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "和键keyFunc关联的值"</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'a string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "和键'a string'关联的值"</span>                         <span class="token comment" spellcheck="true">// 因为keyString === 'a string'</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// undefined, 因为keyObj !== {}</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined, 因为keyFunc !== function () {}</span></code></pre><h4 id="将-NaN-作为-Map-的键"><a href="#将-NaN-作为-Map-的键" class="headerlink" title="将 NaN 作为 Map 的键"></a>将 <code>NaN</code> 作为 <code>Map</code> 的键</h4><p><code>NaN</code> 也可以作为<code>Map</code>对象的键。虽然 <code>NaN</code> 和任何值甚至和自己都不相等(<code>NaN !== NaN</code> 返回true)，但下面的例子表明，<code>NaN</code>作为Map的键来说是没有区别的:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">"not a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "not a number"</span><span class="token keyword">let</span> otherNaN <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>otherNaN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "not a number"</span></code></pre><h4 id="使用-for-of-方法迭代-Map"><a href="#使用-for-of-方法迭代-Map" class="headerlink" title="使用 for..of 方法迭代 Map"></a>使用 <code>for..of</code> 方法迭代 <code>Map</code></h4><p><code>Map</code>可以使用<code>for..of</code>循环来实现迭代：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将会显示两个log。一个是"0 = zero"另一个是"1 = one"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将会显示两个log。 一个是 "0" 另一个是 "1"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将会显示两个log。 一个是 "zero" 另一个是 "one"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将会显示两个log。 一个是 "0 = zero" 另一个是 "1 = one"</span></code></pre><h4 id="使用-forEach-方法迭代-Map"><a href="#使用-forEach-方法迭代-Map" class="headerlink" title="使用 forEach() 方法迭代 Map"></a>使用 <code>forEach()</code> 方法迭代 <code>Map</code></h4><p><code>Map</code>也可以通过<code>forEach()</code>方法迭代：</p><pre class=" language-js"><code class="language-js">myMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将会显示两个logs。 一个是 "0 = zero" 另一个是 "1 = one"</span></code></pre><h4 id="Map-与数组的关系"><a href="#Map-与数组的关系" class="headerlink" title="Map 与数组的关系"></a><code>Map</code> 与数组的关系</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> kvArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象</span><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>kvArray<span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回值为 "value1"</span><span class="token comment" spellcheck="true">// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出和kvArray相同的数组</span><span class="token comment" spellcheck="true">// 更简洁的方法来做如上同样的事情，使用展开运算符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>myMap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 ["key1", "key2"]</span></code></pre><h4 id="复制或合并-Maps"><a href="#复制或合并-Maps" class="headerlink" title="复制或合并 Maps"></a>复制或合并 <code>Maps</code></h4><p>Map 能像数组一样被复制：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> original <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// one</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>original <span class="token operator">===</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false. 浅比较 不为同一个对象的引用</span></code></pre><p>重要：请记住，<em>数据本身</em>未被克隆。</p><p>Map对象间可以进行合并，但是会保持键的唯一性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'uno'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'dos'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。</span><span class="token comment" spellcheck="true">// 展开运算符本质上是将Map对象转换成数组。</span><span class="token keyword">let</span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// uno</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dos</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// three</span></code></pre><p>Map对象也能与数组合并：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'uno'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'dos'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。</span><span class="token keyword">let</span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'eins'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eins</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dos</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// three</span></code></pre><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>请注意！为Map设置对象属性也是可以的，但是可能引起大量的混乱。</p><p>所以，你还是<em>可以这样做.</em>..</p><pre><code>let wrongMap = new Map()wrongMap[&#39;bla&#39;] = &#39;blaa&#39;wrongMap[&#39;bla2&#39;] = &#39;blaaa2&#39;console.log(wrongMap)  // Map { bla: &#39;blaa&#39;, bla2: &#39;blaaa2&#39; }</code></pre><p>…但是，这样做的话，它的行为会不符合预期:</p><pre><code>wrongMap.has(&#39;bla&#39;)    // falsewrongMap.delete(&#39;bla&#39;) // falseconsole.log(wrongMap)  // Map { bla: &#39;blaa&#39;, bla2: &#39;blaaa2&#39; }</code></pre><p>无论如何，和正确用法比较起来，几乎没有什么不同: </p><pre><code>let myMap = new Map()myMap.set(&#39;bla&#39;,&#39;blaa&#39;)myMap.set(&#39;bla2&#39;,&#39;blaa2&#39;)console.log(myMap)  // Map { &#39;bla&#39; =&gt; &#39;blaa&#39;, &#39;bla2&#39; =&gt; &#39;blaa2&#39; }myMap.has(&#39;bla&#39;)    // truemyMap.delete(&#39;bla&#39;) // trueconsole.log(myMap)  // Map { &#39;bla2&#39; =&gt; &#39;blaa2&#39; }</code></pre><p>摘自:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map</a></p><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>ECMAScript 2015 中引入的 JavaScript 类实质上是 JavaScript 现有的基于原型的继承的语法糖。类语法<strong>不会</strong>为JavaScript引入新的面向对象的继承模型。</p><p>类实际上是个“特殊的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions" target="_blank" rel="noopener">函数</a>”，就像你能够定义的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function" target="_blank" rel="noopener">函数表达式</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noopener">函数声明</a>一样，类语法有两个组成部分：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/class" target="_blank" rel="noopener">类表达式</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noopener">类声明</a>。</p><h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><p>定义一个类的一种方法是使用一个<strong>类声明</strong>。要声明一个类，你可以使用带有<code>class</code>关键字的类名（这里是“Rectangle”）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h4><p><strong>函数声明</strong>和<strong>类声明</strong>之间的一个重要区别是函数声明会<a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting" target="_blank" rel="noopener">提升</a>，类声明不会。你首先需要声明你的类，然后访问它，否则像下面的代码会抛出一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" target="_blank" rel="noopener"><code>ReferenceError</code></a>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><p>一个<strong>类表达式</strong>是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 匿名类 */</span> <span class="token keyword">let</span> Rectangle <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 命名的类 */</span> <span class="token keyword">let</span> Rectangle <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>注意:</strong> 类<strong>表达式</strong>也同样受到类<strong>声明</strong>中提到的提升问题的限制。</p><h3 id="类体和方法定义"><a href="#类体和方法定义" class="headerlink" title="类体和方法定义"></a>类体和方法定义</h3><p>一个类的类体是一对花括号/大括号 <code>{}</code> 中的部分。这是你定义类成员的位置，如方法或构造函数。</p><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>类声明和类表达式的主体都执行在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">严格模式</a>下。比如，构造函数，静态方法，原型方法，getter和setter都在严格模式下执行。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor" target="_blank" rel="noopener">constructor</a>方法是一个特殊的方法，这种方法用于创建和初始化一个由<code>class</code>创建的对象。一个类只能拥有一个名为 “constructor”的特殊方法。如果类包含多个<code>constructor</code>的方法，则将抛出 一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a> 。</p><p>一个构造函数可以使用 <code>super</code> 关键字来调用一个父类的构造函数。</p><h4 id="原型方法"><a href="#原型方法" class="headerlink" title="原型方法"></a>原型方法</h4><p>参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Method_definitions" target="_blank" rel="noopener">方法定义</a>。</p><p>例如:</p><pre class=" language-js"><code class="language-js">该简写语法与ECMAScript <span class="token number">2015</span>的getter和setter语法类似。如下代码：<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* code */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* code */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>现可被简写为：<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* code */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* code */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>注意：简写语法使用命名函数而不是匿名函数（如…foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>…）。命名函数可以从函数体调用（这对匿名函数是不可能的，因为没有标识符可以引用）。详细信息，请参阅<span class="token keyword">function</span>。</code></pre><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p><code>static</code> 关键字用来定义一个类的一个静态方法。调用静态方法不需要<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#The_object_(class_instance)" target="_blank" rel="noopener">实例化</a>该类，但不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token keyword">const</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><p>实例的属性必须定义在类的方法里：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>静态的或原型的数据属性必须定义在类定义的外面。</p><pre class=" language-js"><code class="language-js">Rectangle<span class="token punctuation">.</span>staticWidth <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>Rectangle<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>prototypeWidth <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></code></pre><h3 id="使用-extends-创建子类"><a href="#使用-extends-创建子类" class="headerlink" title="使用 extends 创建子类"></a>使用 <code>extends</code> 创建子类</h3><p><code>extends</code> 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' barks.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'Mitzie barks.'</span></code></pre><p>如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</p><p>也可以继承传统的基于函数的“类”：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Animal <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>speak <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' barks.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Mitzie makes a noise.  Mitzie barks.</span></code></pre><p>请注意，类不能继承常规（非可构造）对象。如果要继承常规对象，可以改用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noopener"><code>Object.setPrototypeOf()</code></a>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you do not do this you will get a TypeError when you invoke speak</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Mitzie makes a noise.</span></code></pre><h3 id="Species"><a href="#Species" class="headerlink" title="Species"></a>Species</h3><p>你可能希望在派生数组类 <em><code>MyArray</code></em> 中返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a>对象。这种 species 方式允许你覆盖默认的构造函数。</p><p>例如，当使用像<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener"><code>map()</code></a>返回默认构造函数的方法时，您希望这些方法返回一个父<code>Array</code>对象，而不是<code>MyArray</code>对象。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species" target="_blank" rel="noopener"><code>Symbol.species</code></a> 符号可以让你这样做：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Overwrite species to the parent Array constructor</span>  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>species<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Array<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mapped <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapped <span class="token keyword">instanceof</span> <span class="token class-name">MyArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapped <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="使用-super-调用超类"><a href="#使用-super-调用超类" class="headerlink" title="使用 super 调用超类"></a>使用 <code>super</code> 调用超类</h3><p><code>super</code> 关键字用于调用对象的父对象上的函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' roars.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更多关于js类的资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes</a></p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span>    major <span class="token punctuation">:</span> <span class="token string">'Business'</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>    gpa <span class="token punctuation">:</span> <span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Andy'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>major <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>gpa <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出<span class="token punctuation">:</span>AndyBusiness<span class="token number">2.5</span></code></pre><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p><code>**Object.entries()**</code>方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</p><h4 id="例子-9"><a href="#例子-9" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token string">'somestring'</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// expected output:</span><span class="token comment" spellcheck="true">// "a: somestring"</span><span class="token comment" spellcheck="true">// "b: 42"</span><span class="token comment" spellcheck="true">// order is not guaranteed</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> baz<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ ['foo', 'bar'], ['baz', 42] ]</span><span class="token comment" spellcheck="true">// array like object</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]</span><span class="token comment" spellcheck="true">// array like object with random key ordering</span><span class="token keyword">const</span> anObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>anObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]</span><span class="token comment" spellcheck="true">// getFoo is property which isn't enumerable</span><span class="token keyword">const</span> myObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> getFoo<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ ['foo', 'bar'] ]</span><span class="token comment" spellcheck="true">// non-object argument will be coerced to an object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]</span><span class="token comment" spellcheck="true">// iterate through key-value gracefully</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "a 5", "b 7", "c 9"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Or, using array extras</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "a 5", "b 7", "c 9"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><ul><li><p><code>obj</code></p><p>可以返回其可枚举属性的键值对的对象。</p></li></ul><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>给定对象自身可枚举属性的键值对数组。</p><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p><code>Object.entries()</code>返回一个数组，其元素是与直接在<code>object</code>上找到的可枚举属性键值对相对应的数组。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。</p><p>更详细的Object.entries()资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries</a></p><h3 id="Object-Tips"><a href="#Object-Tips" class="headerlink" title="Object Tips"></a>Object Tips</h3><p>Object结尾的大括号后要加分号;</p><h3 id="JavaScript-call-方法"><a href="#JavaScript-call-方法" class="headerlink" title="JavaScript call() 方法"></a>JavaScript call() 方法</h3><p>call() 方法是预定义的 JavaScript 方法。</p><p>它可以用来调用所有者对象作为参数的方法。</p><p>通过 call()，您能够使用属于另一个对象的方法。</p><p>本例调用 person 的 fullName 方法，并用于 person1：</p><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    fullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"Bill"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Gates"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"Steve"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Jobs"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将返回 "Bill Gates"</span></code></pre><p>本例调用 person 的 fullName 方法，并用于 person2：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    fullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"Mary"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将返回 "Steve Jobs"</span></code></pre><h4 id="带参数的-call-方法"><a href="#带参数的-call-方法" class="headerlink" title="带参数的 call() 方法"></a>带参数的 call() 方法</h4><p>call() 方法可接受参数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  fullName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> country<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> country<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span><span class="token string">"Bill"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Gates"</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Seattle"</span><span class="token punctuation">,</span> <span class="token string">"USA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply()方法"></a>apply()方法</h3><p><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="noopener">类似数组对象</a>）提供的参数。</p><p><strong>注意：</strong>call()方法的作用和 apply() 方法类似，区别就是<code>call()</code>方法接受的是<strong>参数列表</strong>，而<code>apply()</code>方法接受的是<strong>一个参数数组</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 7</span><span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 2</span></code></pre><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><pre><code>func.apply(thisArg, [argsArray])</code></pre><h5 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>thisArg</code></p><p>必选的。在 <em><code>func</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p></li><li><p><code>argsArray</code></p><p>可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="noopener"><code>null</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a>，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Browser_compatibility" target="_blank" rel="noopener">浏览器兼容性</a> 请参阅本文底部内容。</p></li></ul><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><p>调用有指定<code>**this**</code>值和参数的函数的结果。</p><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p>在调用一个存在的函数时，你可以为其指定一个 <code>this</code> 对象。 <code>this</code> 指当前对象，也就是正在调用这个函数的对象。 使用 <code>apply</code>， 你可以只写一次这个方法然后在另一个对象中继承它，而不用在新对象中重复写该方法。</p><p><code>apply</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener"><code>call()</code></a> 非常相似，不同之处在于提供参数的方式。<code>apply</code> 使用参数数组而不是一组参数列表。<code>apply</code> 可以使用数组字面量（array literal），如 <code>fun.apply(this, [&#39;eat&#39;, &#39;bananas&#39;])</code>，或数组对象， 如 <code>fun.apply(this, new Array(&#39;eat&#39;, &#39;bananas&#39;))</code>。</p><p>你也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener"><code>arguments</code></a>对象作为 <code>argsArray</code> 参数。 <code>arguments</code> 是一个函数的局部变量。 它可以被用作被调用对象的所有未指定的参数。 这样，你在使用apply函数的时候就不需要知道被调用对象的所有参数。 你可以使用arguments来把所有的参数传递给被调用对象。 被调用对象接下来就负责处理这些参数。</p><p>从 ECMAScript 第5版开始，可以使用任何种类的类数组对象，就是说只要有一个 <code>length</code> 属性和<code>(0..length-1)</code>范围的整数属性。例如现在可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener"><code>NodeList</code></a> 或一个自己定义的类似 <code>{&#39;length&#39;: 2, &#39;0&#39;: &#39;eat&#39;, &#39;1&#39;: &#39;bananas&#39;}</code> 形式的对象。</p><p>需要注意：Chrome 14 以及 Internet Explorer 9 仍然不接受类数组对象。如果传入类数组对象，它们会抛出异常。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><h5 id="用-apply-将数组添加到另一个数组"><a href="#用-apply-将数组添加到另一个数组" class="headerlink" title="用 apply 将数组添加到另一个数组"></a>用 <code>apply</code> 将数组添加到另一个数组</h5><p><code>concat</code>确实具有我们想要的行为，但它实际上并不附加到现有数组，而是创建并返回一个新数组。 但是我们想要附加到我们现有的阵列</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b", 0, 1, 2]</span></code></pre><h5 id="使用apply和内置函数"><a href="#使用apply和内置函数" class="headerlink" title="使用apply和内置函数"></a>使用<code>apply</code>和内置函数</h5><p>聪明的apply用法允许你在某些本来需要写成遍历数组变量的任务中使用内建的函数。在接下里的例子中我们会使用Math.max/Math.min来找出一个数组中的最大/最小值。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 找出数组中最大/小的数字 */</span><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 应用(apply) Math.min/Math.max 内置函数完成 */</span><span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 基本等同于 Math.max(numbers[0], ...) 或 Math.max(5, 6, ..) */</span><span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 代码对比： 用简单循环完成 */</span>max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">Infinity</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span>    max <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>     min <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是当心：如果用上面的方式调用<code>apply</code>，会有超出JavaScript引擎的参数长度限制的风险。当你对一个方法传入非常多的参数（比如一万个）时，就非常有可能会导致越界问题, 这个临界值是根据不同的 JavaScript 引擎而定的（JavaScript 核心中已经做了硬编码 <a href="https://bugs.webkit.org/show_bug.cgi?id=80797" target="_blank" rel="noopener"> 参数个数限制在65536</a>），因为这个限制（实际上也是任何用到超大栈空间的行为的自然表现）是未指定的. 有些引擎会抛出异常。更糟糕的是其他引擎会直接限制传入到方法的参数个数，导致参数丢失。举个例子：如果某个引擎限制了方法参数最多为4个（实际真正的参数个数限制当然要高得多了, 这里只是打个比方）, 上面的代码中, 真正通过 <code>apply</code>传到目标方法中的参数为 <code>5, 6, 2, 3</code> 而不是完整的数组。</p><p>如果你的参数数组可能非常大，那么推荐使用下面这种策略来处理：将参数数组切块后循环传入目标方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">minOfArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> min <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> QUANTUM <span class="token operator">=</span> <span class="token number">32768</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> QUANTUM<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> submin <span class="token operator">=</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> QUANTUM<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>submin<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> min <span class="token operator">=</span> <span class="token function">minOfArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>更多关于js apply()方法的资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</a></p><h3 id="call-、apply-、bind-的用法"><a href="#call-、apply-、bind-的用法" class="headerlink" title="call()、apply()、bind() 的用法"></a>call()、apply()、bind() 的用法</h3><p>先看明白下面：</p><p>例1:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>    objAge <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>    myFun<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> obj<span class="token punctuation">.</span>objAge<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 17</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 小张年龄 undefined</span></code></pre><p>例2:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fav <span class="token operator">=</span> <span class="token string">'盲僧'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fav<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 盲僧　</span></code></pre><p>比较一下这两者 this 的差别，第一个打印里面的 this 指向 obj，第二个全局声明的 shows() 函数 this 是 window ；</p><p><strong>1，call()、apply()、bind() 都是用来重定义 this 这个对象的！</strong></p><p>如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>    objAge <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>    myFun<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'德玛'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>；　　　　<span class="token comment" spellcheck="true">// 德玛年龄 99</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　 <span class="token comment" spellcheck="true">// 德玛年龄 99</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　<span class="token comment" spellcheck="true">// 德玛年龄 99</span></code></pre><p>以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！</p><p>由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。</p><p><strong>2，对比call 、bind 、 apply 传参情况下</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小王'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'小张'</span><span class="token punctuation">,</span>    objAge <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>    myFun<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>fm<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' 年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token punctuation">,</span> <span class="token string">' 来自'</span> <span class="token operator">+</span> fm <span class="token operator">+</span> <span class="token string">'去往'</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'德玛'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js">obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span>；　　　　 <span class="token comment" spellcheck="true">// 德玛 年龄 99  来自 成都去往上海</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 德玛 年龄 99  来自 成都去往上海  </span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 德玛 年龄 99  来自 成都去往上海</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　 <span class="token comment" spellcheck="true">// 德玛 年龄 99  来自 成都, 上海去往 undefined</span></code></pre><p>微妙的差距！</p><p>从上面四个结果不难看出:</p><p>call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p><p>call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 <strong>obj.myFun.call(db,’成都’, … ,’string’ )</strong>。</p><p>apply 的所有参数都必须放在一个数组里面传进去 <strong>obj.myFun.apply(db,[‘成都’, …, ‘string’ ])</strong>。</p><p>bind 除了返回是函数以外，它 的参数和 call 一样。</p><p>当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！</p><p>转自:<a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/js-call-apply-bind.html</a></p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p><code>window</code> 对象表示一个包含DOM文档的窗口，其 <code>document</code> 属性指向窗口中载入的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener">DOM文档</a> 。使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/defaultView" target="_blank" rel="noopener"><code>document.defaultView</code></a> 属性可以获取指定文档所在窗口。</p><p><code>window</code>作为全局变量，代表了脚本正在运行的窗口，暴露给 Javascript 代码。</p><p>在有标签页功能的浏览器中，每个标签都拥有自己的 <code>window</code> 对象；也就是说，同一个窗口的标签页之间不会共享一个 <code>window</code> 对象。有一些方法，如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resizeTo" target="_blank" rel="noopener"><code>window.resizeTo</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resizeBy" target="_blank" rel="noopener"><code>window.resizeBy</code></a> 之类的方法会作用于整个窗口而不是 <code>window</code> 对象所属的那个标签。一般而言，如果一样东西无法恰当地作用于标签，那么它就会作用于窗口。</p><p>更详细的js window资料访问: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window</a></p><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p><strong><code>Object.create()</code></strong>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。</p><h4 id="例子-10"><a href="#例子-10" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  isHuman<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  printIntroduction<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Am I human? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHuman<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> me <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>me<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Matthew"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "name" is a property set on "me", but not on "person"</span>me<span class="token punctuation">.</span>isHuman <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inherited properties can be overwritten</span>me<span class="token punctuation">.</span><span class="token function">printIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: "My name is Matthew. Am I human? true"</span></code></pre><h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><pre><code>Object.create(proto[, propertiesObject])</code></pre><h5 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>proto</code></p><p>新创建对象的原型对象。</p></li><li><p><code>propertiesObject</code></p><p>可选。如果没有指定为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a>，则是要添加到新创建对象的不可枚举（默认）属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties" target="_blank" rel="noopener"><code>Object.defineProperties()</code></a>的第二个参数。</p></li></ul><h5 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h5><p>一个新对象，带着指定的原型对象和属性。</p><h5 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h5><p>如果<code>propertiesObject</code>参数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="noopener"><code>null</code></a> 或非原始包装对象，则抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 异常。</p><p>更多关于js Object.create()的信息访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create</a></p><p>更多关于js object的信息访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a></p><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p><strong>展开语法(Spread syntax),</strong> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。(<strong>译者注</strong>: 字面量一般指 <code>[1, 2, 3]</code> 或者 <code>{name: &quot;mdn&quot;}</code> 这种简洁的构造方式)</p><p>如console.log([…myMap]);中的…为展开运算符。</p><h3 id="例子-11"><a href="#例子-11" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 6</span><span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'uno'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'dos'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。</span><span class="token comment" spellcheck="true">// 展开运算符本质上是将Map对象转换成数组。</span><span class="token keyword">let</span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// uno</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dos</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// three</span></code></pre><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><p>函数调用：</p><pre class=" language-js"><code class="language-js"><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token operator">...</span>iterableObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>字面量数组构造或字符串：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">...</span>iterableObj<span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>构造字面量对象时,进行克隆或者属性拷贝（ECMAScript 2018规范新增特性）：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> objClone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>更详细的展开语法资料访问：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><h3 id="例子-12"><a href="#例子-12" class="headerlink" title="例子:"></a>例子:</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span>  num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span>输出<span class="token number">64</span></code></pre><h3 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a>Function.prototype.bind()</h3><p><code>**bind()**</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><h4 id="例子-13"><a href="#例子-13" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  getX<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> unboundGetX <span class="token operator">=</span> module<span class="token punctuation">.</span>getX<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unboundGetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The function gets invoked at the global scope</span><span class="token comment" spellcheck="true">// expected output: undefined</span><span class="token keyword">const</span> boundGetX <span class="token operator">=</span> unboundGetX<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">boundGetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 42</span></code></pre><h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><pre><code>function.bind(thisArg[, arg1[, arg2[, ...]]])</code></pre><h5 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>thisArg</code></p><p>调用绑定函数时作为 <code>this</code> 参数传递给目标函数的值。 如果使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener"><code>new</code></a>运算符构造绑定函数，则忽略该值。当使用 <code>bind</code> 在 <code>setTimeout</code> 中创建一个函数（作为回调提供）时，作为 <code>thisArg</code> 传递的任何原始值都将转换为 <code>object</code>。如果 <code>bind</code> 函数的参数列表为空，执行作用域的 <code>this</code> 将被视为新函数的 <code>thisArg</code>。</p></li><li><p><code>arg1, arg2, ...</code></p><p>当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</p></li></ul><h5 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h5><p>返回一个原函数的拷贝，并拥有指定的 <strong><code>this</code></strong> 值和初始参数。</p><p>更详细的Function.prototype.bind()的资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</a></p><p>更多关于js function的信息访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><h2 id="JS中的prototype、proto与constructor"><a href="#JS中的prototype、proto与constructor" class="headerlink" title="JS中的prototype、proto与constructor"></a>JS中的prototype、<strong>proto</strong>与constructor</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码表示创建一个构造函数Foo()，并用new关键字实例化该构造函数得到一个实例化对象f1。这里稍微补充一下new操作符将函数作为构造器进行调用时的过程：函数被调用，然后新创建一个对象，并且成了函数的上下文（也就是此时函数内部的this是指向该新创建的对象，这意味着我们可以在构造器函数内部通过this参数初始化值），最后返回该新对象的引用，详细请看：详解JavaScript中的new操作符。虽然是简简单单的两行代码，然而它们背后的关系却是错综复杂的，如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20190311194017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>看到这图别怕，让我们一步步剖析，彻底搞懂它们！<br>  图的说明：右下角为图例，红色箭头表示<strong>proto</strong>属性指向、绿色箭头表示prototype属性的指向、棕色实线箭头表示本身具有的constructor属性的指向，棕色虚线箭头表示继承而来的constructor属性的指向；蓝色方块表示对象，浅绿色方块表示函数（这里为了更好看清，Foo()仅代表是函数，并不是指执行函数Foo后得到的结果，图中的其他函数同理）。图的中间部分即为它们之间的联系，图的最左边即为例子代码。</p><h3 id="proto-属性"><a href="#proto-属性" class="headerlink" title="_ _ proto _ _ 属性"></a>_ _ proto _ _ 属性</h3><p>首先，我们需要牢记两点：①<strong>proto</strong>和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性，这点是致使我们产生困惑的很大原因之一。上图有点复杂，我们把它按照属性分别拆开，然后进行分析：</p><p><img src="https://img-blog.csdnimg.cn/20190311192930650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>  第一，这里我们仅留下 <strong>proto</strong> 属性，它是对象所独有的，可以看到<strong>proto</strong>属性都是由一个对象指向一个对象，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<strong>proto</strong>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找…直到原型链顶端null（可以理解为原始人。。。），再往上找就相当于在null上取值，会报错（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此结束，null为原型链的终点），由以上这种通过<strong>proto</strong>属性来连接对象直到null的一条链即为我们所谓的原型链。<br>  其实我们平时调用的字符串方法、数组方法、对象方法、函数方法等都是靠<strong>proto</strong>继承而来的。</p><h3 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h3><p>第二，接下来我们看 prototype 属性：</p><p><img src="https://img-blog.csdnimg.cn/20190311193033876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>  prototype属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：f1.<strong>proto</strong> === Foo.prototype，它们两个完全一样。那prototype属性的作用又是什么呢？它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。任何函数在创建的时候，其实会默认同时创建该函数的prototype对象。</p><h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><p>最后，我们来看一下 constructor 属性：</p><p><img src="https://img-blog.csdnimg.cn/20190311193745414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>  constructor属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合<strong>proto</strong>属性查看会更清楚点，如下图所示），从上图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由Function构造函数得来，所以constructor属性的终点就是Function这个函数。</p><p><img src="https://img-blog.csdnimg.cn/20190311193622793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>  感谢网友的指出，这里解释一下上段中“每个对象都有构造函数”这句话。这里的意思是每个对象都可以找到其对应的constructor，因为创建对象的前提是需要有constructor，而这个constructor可能是对象自己本身显式定义的或者通过<strong>proto</strong>在原型链中找到的。而单从constructor这个属性来讲，只有prototype对象才有。每个函数在创建的时候，JS会同时创建一个该函数对应的prototype对象，而函数创建的对象.<strong>proto</strong> === 该函数.prototype，该函数.prototype.constructor===该函数本身，故通过函数创建的对象即使自己没有constructor属性，它也能通过<strong>proto</strong>找到对应的constructor，所以任何对象最终都可以找到其构造函数（null如果当成对象的话，将null除外）。如下：</p><p><img src="https://img-blog.csdnimg.cn/20190311192013184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下：</p><p>我们需要牢记两点：①<strong>proto</strong>和constructor属性是对象所独有的；② prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性。<br><strong>proto</strong>属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的那个对象（父对象）里找，一直找，直到<strong>proto</strong>属性的终点null，再往上找就相当于在null上取值，会报错。通过<strong>proto</strong>属性将对象连接起来的这条链路即我们所谓的原型链。<br>prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.<strong>proto</strong> === Foo.prototype。<br>constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function。</p><p>原文链接：<a href="https://blog.csdn.net/cc18868876837/article/details/81211729" target="_blank" rel="noopener">https://blog.csdn.net/cc18868876837/article/details/81211729</a></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p><p>引入箭头函数有两个方面的作用：更简短的函数并且不绑定<code>this</code>。</p><p>为什么叫Arrow Function？因为它的定义用的就是一个箭头：</p><pre class=" language-js"><code class="language-js">x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x</code></pre><p>上面的箭头函数相当于：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种像上面的，只包含一个表达式，连<code>{ ... }</code>和<code>return</code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略<code>{ ... }</code>和<code>return</code>：</p><pre class=" language-js"><code class="language-js">x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果参数不是一个，就需要用括号<code>()</code>括起来：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 两个参数:</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token comment" spellcheck="true">// 无参数:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3.14</span><span class="token comment" spellcheck="true">// 可变参数:</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i<span class="token punctuation">,</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>rest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> rest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// SyntaxError:</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> x <span class="token punctuation">}</span></code></pre><p>因为和函数体的<code>{ ... }</code>有语法冲突，所以要改为：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ok:</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> x <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的this值：</p><ul><li>如果是该函数是一个构造函数，this指针指向一个新的对象</li><li>在严格模式下的函数调用下，this指向undefined</li><li>如果是该函数是一个对象的方法，则它的this指针指向这个对象</li><li>等等</li></ul><p>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：箭头函数内部的<code>this</code>是词法作用域，由上下文确定。</p><p> 箭头函数没有自己的this指针</p><h4 id="没有单独的this"><a href="#没有单独的this" class="headerlink" title="没有单独的this"></a>没有单独的<code>this</code></h4><p><code>This</code>被证明是令人厌烦的面向对象风格的编程。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Person() 构造函数定义 `this`作为它自己的实例.</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">growUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在非严格模式, growUp()函数定义 `this`作为全局对象, </span>    <span class="token comment" spellcheck="true">// 与在 Person()构造函数中定义的 `this`并不相同.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在ECMAScript 3/5中，通过将<code>this</code>值分配给封闭的变量，可以解决<code>this</code>问题。</p><pre><code>function Person() {  var that = this;  that.age = 0;  setInterval(function growUp() {    //  回调引用的是`that`变量, 其值是预期的对象.     that.age++;  }, 1000);}</code></pre><p>或者，可以创建<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">绑定函数</a>，以便将预先分配的<code>this</code>值传递到绑定的目标函数（上述示例中的<code>growUp()</code>函数）。</p><p>箭头函数不会创建自己的<code>this,它只会从自己的作用域链的上一层继承this</code>。因此，在下面的代码中，传递给<code>setInterval</code>的函数内的<code>this</code>与封闭函数中的<code>this</code>值相同：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// |this| 正确地指向 p 实例</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="与严格模式的关系"><a href="#与严格模式的关系" class="headerlink" title="与严格模式的关系"></a>与严格模式的关系</h4><p>鉴于 <code>this</code> 是词法层面上的，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">严格模式</a>中与 <code>this</code> 相关的规则都将被忽略。</p><pre><code>var f = () =&gt; { &#39;use strict&#39;; return this; };f() === window; // 或者 global</code></pre><p>严格模式的其他规则依然不变.</p><p>由于JavaScript函数对<code>this</code>绑定的错误处理，下面的例子无法得到预期结果：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1990</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window或undefined</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在，箭头函数完全修复了<code>this</code>的指向，<code>this</code>总是指向词法作用域，也就是外层调用者<code>obj</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1990</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向obj对象</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25</span></code></pre><p>如果使用箭头函数，以前的那种hack写法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></code></pre><p>就不再需要了。(由于javascript解释器在不同浏览器支持功能（尤其是DOM）不同，为了能够使javascript代码能够在不同浏览器下正常运行，就需要针对不同浏览器写兼容代码，所谓的hack就是做这些兼容意思)</p><p>由于<code>this</code>在箭头函数中已经按照词法作用域绑定了，所以，用<code>call()</code>或者<code>apply()</code>调用箭头函数时，无法对<code>this</code>进行绑定，即传入的第一个参数被忽略：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    birth<span class="token punctuation">:</span> <span class="token number">1990</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1990</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this.birth仍是1990</span>        <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>birth<span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25</span></code></pre><p>摘自:<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1031549578462080" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1022910821149312/1031549578462080</a></p><p>更详细的箭头函数资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p><h2 id="Event-Handler"><a href="#Event-Handler" class="headerlink" title="Event Handler"></a>Event Handler</h2><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script type="text/javascript" charset="utf-8" async defer>        alert("Inline JS");    &lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myHeader<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleClick(this)<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span>Giraffe Academy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>this指代的是该元素。</p><p>app.js：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'clicked'</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述功能实现方法2(不在html文档中加onclick):</p><p>html:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script type="text/javascript" charset="utf-8" async defer>        alert("Inline JS");    &lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myHeader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Giraffe Academy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>js:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> header <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myHeader'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>header<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'clicked'</span> <span class="token operator">+</span> header<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件句柄-Event-Handlers-表"><a href="#事件句柄-Event-Handlers-表" class="headerlink" title="事件句柄　(Event Handlers) 表"></a>事件句柄　(Event Handlers) 表</h3><p>HTML 4.0 的新特性之一是能够使 HTML 事件触发浏览器中的行为，比如当用户点击某个 HTML 元素时启动一段 JavaScript。下面是一个属性列表，可将之插入 HTML 标签以定义事件的行为。</p><table><thead><tr><th align="left">属性</th><th align="left">此事件发生在何时…</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onabort.asp" target="_blank" rel="noopener">onabort</a></td><td align="left">图像的加载被中断。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onblur.asp" target="_blank" rel="noopener">onblur</a></td><td align="left">元素失去焦点。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onchange.asp" target="_blank" rel="noopener">onchange</a></td><td align="left">域的内容被改变。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onclick.asp" target="_blank" rel="noopener">onclick</a></td><td align="left">当用户点击某个对象时调用的事件句柄。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_ondblclick.asp" target="_blank" rel="noopener">ondblclick</a></td><td align="left">当用户双击某个对象时调用的事件句柄。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onerror.asp" target="_blank" rel="noopener">onerror</a></td><td align="left">在加载文档或图像时发生错误。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onfocus.asp" target="_blank" rel="noopener">onfocus</a></td><td align="left">元素获得焦点。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onkeydown.asp" target="_blank" rel="noopener">onkeydown</a></td><td align="left">某个键盘按键被按下。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onkeypress.asp" target="_blank" rel="noopener">onkeypress</a></td><td align="left">某个键盘按键被按下并松开。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onkeyup.asp" target="_blank" rel="noopener">onkeyup</a></td><td align="left">某个键盘按键被松开。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onload.asp" target="_blank" rel="noopener">onload</a></td><td align="left">一张页面或一幅图像完成加载。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onmousedown.asp" target="_blank" rel="noopener">onmousedown</a></td><td align="left">鼠标按钮被按下。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onmousemove.asp" target="_blank" rel="noopener">onmousemove</a></td><td align="left">鼠标被移动。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onmouseout.asp" target="_blank" rel="noopener">onmouseout</a></td><td align="left">鼠标从某元素移开。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onmouseover.asp" target="_blank" rel="noopener">onmouseover</a></td><td align="left">鼠标移到某元素之上。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onmouseup.asp" target="_blank" rel="noopener">onmouseup</a></td><td align="left">鼠标按键被松开。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onreset.asp" target="_blank" rel="noopener">onreset</a></td><td align="left">重置按钮被点击。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onresize.asp" target="_blank" rel="noopener">onresize</a></td><td align="left">窗口或框架被重新调整大小。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onselect.asp" target="_blank" rel="noopener">onselect</a></td><td align="left">文本被选中。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onsubmit.asp" target="_blank" rel="noopener">onsubmit</a></td><td align="left">确认按钮被点击。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/event_onunload.asp" target="_blank" rel="noopener">onunload</a></td><td align="left">用户退出页面。</td></tr></tbody></table><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="If"><a href="#If" class="headerlink" title="If"></a>If</h3><h4 id="例子-14"><a href="#例子-14" class="headerlink" title="例子:"></a>例子:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isStudent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> isSmart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isStudent <span class="token operator">&amp;&amp;</span> isSmart<span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'You are a student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isStudent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSmart<span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'You are not a smart student'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'You are not a student and not smart'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'1 > 3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'dog'</span> <span class="token operator">==</span> <span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'dog == dog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Switch-语句"><a href="#Switch-语句" class="headerlink" title="Switch 语句"></a>Switch 语句</h3><h4 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myGrade <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>myGrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'You Pass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'F'</span><span class="token punctuation">:</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'You fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Invalid grade'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Loop-循环"><a href="#Loop-循环" class="headerlink" title="Loop 循环"></a>Loop 循环</h2><h3 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h3><h4 id="例子-15"><a href="#例子-15" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><h4 id="例子-16"><a href="#例子-16" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Foreach-loop"><a href="#Foreach-loop" class="headerlink" title="Foreach loop"></a>Foreach loop</h3><h4 id="例子-17"><a href="#例子-17" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> luckyNums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>luckyNums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>luckyNum<span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>luckyNum <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Exception-catching"><a href="#Exception-catching" class="headerlink" title="Exception catching"></a>Exception catching</h2><h3 id="例子-18"><a href="#例子-18" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var x = y + 9;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//throw Something went wrong</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//this code always gets executed</span><span class="token punctuation">}</span></code></pre><p>更为详细的异常处理资料访问:<a href="https://www.runoob.com/js/js-errors.html" target="_blank" rel="noopener">https://www.runoob.com/js/js-errors.html</a></p><h2 id="Class-amp-Object"><a href="#Class-amp-Object" class="headerlink" title="Class &amp; Object"></a>Class &amp; Object</h2><h3 id="例子-19"><a href="#例子-19" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">readBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Reading'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">'by'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'Harry Potter'</span><span class="token punctuation">,</span><span class="token string">'JK Rowling'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span><span class="token function">readBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="get-amp-set"><a href="#get-amp-set" class="headerlink" title="get &amp; set"></a>get &amp; set</h3><h4 id="例子-20"><a href="#例子-20" class="headerlink" title="例子:"></a>例子:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;p>getting&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">title</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;p>setting&lt;/p>'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">readBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Reading'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">'by'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'Harry Potter'</span><span class="token punctuation">,</span><span class="token string">'JK Rowling'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>book1<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span><span class="token function">readBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出<span class="token punctuation">:</span>settinggettingHarry PottergettingReadingHarry PotterbyJK Rowling</code></pre><h3 id="Inheritance-继承"><a href="#Inheritance-继承" class="headerlink" title="Inheritance 继承"></a>Inheritance 继承</h3><h4 id="例子-21"><a href="#例子-21" class="headerlink" title="例子"></a>例子</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Chef</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">makeChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'The chef makes chicken &lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">makeSalad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'The chef makes salad &lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">makeSpecialDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'The chef makes a special dish &lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ItalianChef</span> <span class="token keyword">extends</span> <span class="token class-name">Chef</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> countOfOrigin<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>countOfOrigin <span class="token operator">=</span> countOfOrigin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">makePasta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'The chef makes pasta &lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">makeSpecialDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'The chef makes chicken parm &lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> myChef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chef</span><span class="token punctuation">(</span><span class="token string">'Gordon Ramsay'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myChef<span class="token punctuation">.</span><span class="token function">makeChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myChef<span class="token punctuation">.</span><span class="token function">makeSpecialDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myItalianChef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItalianChef</span><span class="token punctuation">(</span><span class="token string">'Mass Bott'</span><span class="token punctuation">,</span><span class="token number">55</span> <span class="token punctuation">,</span><span class="token string">'Italy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myItalianChef<span class="token punctuation">.</span><span class="token function">makeChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myItalianChef<span class="token punctuation">.</span><span class="token function">makeSpecialDish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>myItalianChef<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>输出<span class="token punctuation">:</span>The chef makes chickenThe chef makes a special dishThe chef makes chickenThe chef makes chicken parm<span class="token number">55</span></code></pre><p>更详细js Class &amp; Object资料访问:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes</a></p><h2 id="装箱和拆箱操作"><a href="#装箱和拆箱操作" class="headerlink" title="装箱和拆箱操作"></a>装箱和拆箱操作</h2><p>1，装箱：</p><p>把基本数据类型转换为对应的引用类型的操作称为装箱，把引用类型转换为基本的数据类型称为拆箱。</p><p>在《javascript高级程序设计》中有这样一句话：</p><pre><code>每当读取一个基本类型的时候，后台就会创建一个对应的基本包装类型对象，从而让我们能够调用一些方法来操作这些数据。var s1 = &quot;some text&quot;;var s2 = s1.substring(2);</code></pre><p>如上所视，变量s1是一个基本类型值，它不是对象，所以它不应该有方法。但是js内部为我们完成了一系列处理（即我们称之为装箱），使得它能够调用方法,实现的机制如下：</p><p>（1）创建String类型的一个实例；</p><p>（2）在实例上调用指定的方法；</p><p>（3）销毁这个实例；</p><p>这个过程也可以用代码来展现：</p><pre><code>var s1  = new String(&quot;some text&quot;);var s2 = s1.substring(2);s1 = null;</code></pre><p>我在很多地方都看到过说装箱操作会泄露内存，可是这里明明是销毁了实例的，哎，我还是相信《javascript高级程序设计》吧，认为它不会泄露，如果你有见解，请留言！</p><p>2，拆箱：</p><p>将引用类型对象转换为对应的值类型对象，它是通过引用类型的valueOf()或者toString()方法来实现的。如果是自定义的对象，你也可以自定义它的valueOf()/tostring()方法，实现对这个对象的拆箱。</p><pre><code> 1 var objNum = new Number(123);   2 var objStr =new String(&quot;123&quot;);   3  4 console.log( typeof objNum ); //object 5 console.log( typeof objStr ); //object 6  7 console.log( typeof objNum.valueOf() ); //number 8 console.log( typeof objStr.valueOf() ); //string9 10 console.log( typeof objNum.toString() ); // string 11 console.log( typeof objStr.toString() ); // string</code></pre><p>摘自 <a href="https://www.cnblogs.com/wenber/p/3628944.html" target="_blank" rel="noopener">https://www.cnblogs.com/wenber/p/3628944.html</a></p><h2 id="解构赋值-Destructuring-assignment"><a href="#解构赋值-Destructuring-assignment" class="headerlink" title="解构赋值 - Destructuring assignment"></a>解构赋值 - Destructuring assignment</h2><p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。</p><h3 id="例子-22"><a href="#例子-22" class="headerlink" title="例子"></a>例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rest<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: 20</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// expected output: Array [30,40,50]</span>输出<span class="token punctuation">:</span><span class="token operator">></span> <span class="token number">10</span><span class="token operator">></span> <span class="token number">20</span><span class="token operator">></span> Array <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span></code></pre><hr><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rest<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [30, 40, 50]</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token comment" spellcheck="true">// Stage 4（已完成）提案中的特性</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {c: 30, d: 40}</span></code></pre><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p>对象和数组逐个对应表达式，或称对象字面量和数组字面量，提供了一种简单的定义一个特定的数据组的方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>解构赋值使用了相同的语法，不同的是在表达式左边定义了要从原变量中取出什么变量。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>JavaScript 中，解构赋值的作用类似于 Perl 和 Python 语言中的相似特性。</p><h3 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h3><h4 id="变量声明并赋值时的解构"><a href="#变量声明并赋值时的解构" class="headerlink" title="变量声明并赋值时的解构"></a>变量声明并赋值时的解构</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "one"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "two"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "three"</span></code></pre><h4 id="变量先声明后赋值时的解构"><a href="#变量先声明后赋值时的解构" class="headerlink" title="变量先声明后赋值时的解构"></a>变量先声明后赋值时的解构</h4><p>通过解构分离变量的声明，可以为一个变量赋值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>为了防止从数组中取出一个值为<code>undefined</code>的对象，可以在表达式左边的数组中为任意对象预设默认值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span></code></pre><h4 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h4><p>在一个解构表达式中可以交换两个变量的值。</p><p>没有解构赋值的情况下，交换两个变量需要一个临时变量（或者用低级语言中的<a href="http://en.wikipedia.org/wiki/XOR_swap" target="_blank" rel="noopener">XOR-swap技巧</a>）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h4 id="解析一个从函数返回的数组"><a href="#解析一个从函数返回的数组" class="headerlink" title="解析一个从函数返回的数组"></a>解析一个从函数返回的数组</h4><p>从一个函数返回一个数组是十分常见的情况。解构使得处理返回值为数组时更加方便。</p><p>在下面例子中，要让 <code>[1, 2]</code> 成为函数的 <code>f()</code> 的输出值，可以使用解构在一行内完成解析。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h4 id="忽略某些返回值"><a href="#忽略某些返回值" class="headerlink" title="忽略某些返回值"></a>忽略某些返回值</h4><p>你也可以忽略你不感兴趣的返回值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>你也可以忽略全部返回值：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="将剩余数组赋值给一个变量"><a href="#将剩余数组赋值给一个变量" class="headerlink" title="将剩余数组赋值给一个变量"></a>将剩余数组赋值给一个变量</h4><p>当解构一个数组时，可以使用剩余模式，将数组剩余部分赋值给一个变量。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 3]</span></code></pre><p>注意：如果剩余元素右侧有逗号，会抛出 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a>，因为剩余元素必须是数组的最后一个元素。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SyntaxError: rest element may not have a trailing comma</span></code></pre><h4 id="用正则表达式匹配提取值"><a href="#用正则表达式匹配提取值" class="headerlink" title="用正则表达式匹配提取值"></a>用正则表达式匹配提取值</h4><p>用正则表达式的 <code>exec()</code> 方法匹配字符串会返回一个数组，该数组第一个值是完全匹配正则表达式的字符串，然后的值是匹配正则表达式括号内内容部分。解构赋值允许你轻易地提取出需要的部分，忽略完全匹配的字符串——如果不需要的话。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">parseProtocol</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> parsedURL <span class="token operator">=</span> <span class="token regex">/^(\w+)\:\/\/([^\/]+)\/(.*)$/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parsedURL<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parsedURL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["https://developer.mozilla.org/en-US/Web/JavaScript", "https", "developer.mozilla.org", "en-US/Web/JavaScript"]</span>  <span class="token keyword">var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> protocol<span class="token punctuation">,</span> fullhost<span class="token punctuation">,</span> fullpath<span class="token punctuation">]</span> <span class="token operator">=</span> parsedURL<span class="token punctuation">;</span>  <span class="token keyword">return</span> protocol<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseProtocol</span><span class="token punctuation">(</span><span class="token string">'https://developer.mozilla.org/en-US/Web/JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "h</span></code></pre><h3 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h3><h4 id="基本赋值"><a href="#基本赋值" class="headerlink" title="基本赋值"></a>基本赋值</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>p<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span>p<span class="token punctuation">,</span> q<span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="无声明赋值"><a href="#无声明赋值" class="headerlink" title="无声明赋值"></a>无声明赋值</h4><p>一个变量可以独立于其声明进行解构赋值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：赋值语句周围的圆括号 <code>( ... )</code> 在使用对象字面量无声明解构赋值时是必须的。</p><p><code>{a, b} = {a: 1, b: 2}</code> 不是有效的独立语法，因为左边的 <code>{a, b}</code> 被认为是一个块而不是对象字面量。</p><p>然而，<code>({a, b} = {a: 1, b: 2})</code> 是有效的，正如 <code>var {a, b} = {a: 1, b: 2}</code></p><p>你的 <code>( ... )</code> 表达式之前需要有一个分号，否则它可能会被当成上一行中的函数执行。</p><h4 id="给新的变量名赋值"><a href="#给新的变量名赋值" class="headerlink" title="给新的变量名赋值"></a>给新的变量名赋值</h4><p>可以从一个对象中提取变量并赋值给和对象属性名不同的新的变量名。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>p<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span>p<span class="token punctuation">:</span> foo<span class="token punctuation">,</span> q<span class="token punctuation">:</span> bar<span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span></code></pre><h4 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h4><p>变量可以先赋予默认值。当要提取的对象没有对应的属性，变量就被赋予默认值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h4 id="给新的变量命名并提供默认值"><a href="#给新的变量命名并提供默认值" class="headerlink" title="给新的变量命名并提供默认值"></a>给新的变量命名并提供默认值</h4><p>一个属性可以同时 1）从一个对象解构，并分配给一个不同名称的变量 2）分配一个默认值，以防未解构的值是 <code>undefined</code>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span>aa <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span>bb <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h4 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h4><h5 id="ES5-版本"><a href="#ES5-版本" class="headerlink" title="ES5 版本"></a>ES5 版本</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">drawES5Chart</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  options <span class="token operator">=</span> options <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> options<span class="token punctuation">;</span>  <span class="token keyword">var</span> size <span class="token operator">=</span> options<span class="token punctuation">.</span>size <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token string">'big'</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token keyword">var</span> cords <span class="token operator">=</span> options<span class="token punctuation">.</span>cords <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>cords<span class="token punctuation">;</span>  <span class="token keyword">var</span> radius <span class="token operator">=</span> options<span class="token punctuation">.</span>radius <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token number">25</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>radius<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cords<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// now finally do some chart drawing</span><span class="token punctuation">}</span><span class="token function">drawES5Chart</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cords<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  radius<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="ES2015-版本"><a href="#ES2015-版本" class="headerlink" title="ES2015 版本"></a>ES2015 版本</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">drawES2015Chart</span><span class="token punctuation">(</span><span class="token punctuation">{</span>size <span class="token operator">=</span> <span class="token string">'big'</span><span class="token punctuation">,</span> cords <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> radius <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cords<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// do some chart drawing</span><span class="token punctuation">}</span><span class="token function">drawES2015Chart</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cords<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  radius<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的 drawES2015Chart 的函数签名中，解构的左手边被分配给右手边的空对象字面值：{size = ‘big’, cords = {x: 0, y: 0}, radius = 25} = {}。你也可以在没有右侧分配的情况下编写函数。但是，如果你忽略了右边的赋值，那么函数会在被调用的时候查找至少一个被提供的参数，而在当前的形式下，你可以直接调用 drawES2015Chart() 而不提供任何参数。如果你希望能够在不提供任何参数的情况下调用该函数，则当前的设计非常有用，而另一种方法在您确保将对象传递给函数时非常有用。</p><h4 id="解构嵌套对象和数组"><a href="#解构嵌套对象和数组" class="headerlink" title="解构嵌套对象和数组"></a>解构嵌套对象和数组</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> metadata <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Scratchpad'</span><span class="token punctuation">,</span>  translations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      locale<span class="token punctuation">:</span> <span class="token string">'de'</span><span class="token punctuation">,</span>      localization_tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      last_edit<span class="token punctuation">:</span> <span class="token string">'2014-04-14T08:43:37'</span><span class="token punctuation">,</span>      url<span class="token punctuation">:</span> <span class="token string">'/de/docs/Tools/Scratchpad'</span><span class="token punctuation">,</span>      title<span class="token punctuation">:</span> <span class="token string">'JavaScript-Umgebung'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span> <span class="token string">'/en-US/docs/Tools/Scratchpad'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> englishTitle<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// rename</span>  translations<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>       title<span class="token punctuation">:</span> localeTitle<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// rename</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token operator">=</span> metadata<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>englishTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Scratchpad"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localeTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "JavaScript-Umgebung"</span></code></pre><h4 id="For-of-迭代和解构"><a href="#For-of-迭代和解构" class="headerlink" title="For of 迭代和解构"></a>For of 迭代和解构</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Mike Smith'</span><span class="token punctuation">,</span>    family<span class="token punctuation">:</span> <span class="token punctuation">{</span>      mother<span class="token punctuation">:</span> <span class="token string">'Jane Smith'</span><span class="token punctuation">,</span>      father<span class="token punctuation">:</span> <span class="token string">'Harry Smith'</span><span class="token punctuation">,</span>      sister<span class="token punctuation">:</span> <span class="token string">'Samantha Smith'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">35</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Tom Jones'</span><span class="token punctuation">,</span>    family<span class="token punctuation">:</span> <span class="token punctuation">{</span>      mother<span class="token punctuation">:</span> <span class="token string">'Norah Jones'</span><span class="token punctuation">,</span>      father<span class="token punctuation">:</span> <span class="token string">'Richard Jones'</span><span class="token punctuation">,</span>      brother<span class="token punctuation">:</span> <span class="token string">'Howard Jones'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">25</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> n<span class="token punctuation">,</span> family<span class="token punctuation">:</span> <span class="token punctuation">{</span>father<span class="token punctuation">:</span> f<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">of</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Name: '</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">', Father: '</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// "Name: Mike Smith, Father: Harry Smith"</span><span class="token comment" spellcheck="true">// "Name: Tom Jones, Father: Richard Jones"</span></code></pre><h4 id="从作为函数实参的对象中提取数据"><a href="#从作为函数实参的对象中提取数据" class="headerlink" title="从作为函数实参的对象中提取数据"></a>从作为函数实参的对象中提取数据</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">whois</span><span class="token punctuation">(</span><span class="token punctuation">{</span>displayName<span class="token punctuation">:</span> displayName<span class="token punctuation">,</span> fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>displayName <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>   id<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>   displayName<span class="token punctuation">:</span> <span class="token string">"jdoe"</span><span class="token punctuation">,</span>  fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>       firstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>      lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"userId: "</span> <span class="token operator">+</span> <span class="token function">userId</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "userId: 42"</span><span class="token function">whois</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "jdoe is John"</span></code></pre><p>这段代码从user对象中提取并输出<code>id、``displayName</code> 和 <code>firstName</code>。</p><h4 id="对象属性计算名和解构"><a href="#对象属性计算名和解构" class="headerlink" title="对象属性计算名和解构"></a>对象属性计算名和解构</h4><p>计算属性名，如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names" target="_blank" rel="noopener">object literals</a>，可以被解构。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">"z"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "bar"</span></code></pre><h4 id="对象解构中的-Rest"><a href="#对象解构中的-Rest" class="headerlink" title="对象解构中的 Rest"></a>对象解构中的 Rest</h4><p><a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">Rest/Spread Properties for ECMAScript</a> 提案（阶段 4）将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="noopener">rest</a> 语法添加到解构中。Rest 属性收集那些尚未被解构模式拾取的剩余可枚举属性键。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">}</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 </span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20 </span>rest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { c: 30, d: 40 }</span></code></pre><h4 id="无效的-JavaScript-标识符作为属性名称"><a href="#无效的-JavaScript-标识符作为属性名称" class="headerlink" title="无效的 JavaScript 标识符作为属性名称"></a>无效的 JavaScript 标识符作为属性名称</h4><p>通过提供有效的替代标识符，解构可以与不是有效的JavaScript<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Identifier" target="_blank" rel="noopener">标识符</a>的属性名称一起使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'fizz-buzz'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token string">'fizz-buzz'</span><span class="token punctuation">:</span> fizzBuzz <span class="token punctuation">}</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fizzBuzz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "true"</span></code></pre><h4 id="解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）"><a href="#解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）" class="headerlink" title="解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）"></a>解构对象时会查找原型链（如果属性不在对象自身，将从原型链中查找）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明对象 和 自身 self 属性</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>self<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在原型链中定义一个属性 prot</span>obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>prot <span class="token operator">=</span> <span class="token string">'456'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// test</span><span class="token keyword">const</span> <span class="token punctuation">{</span>self<span class="token punctuation">,</span> prot<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// self "123"</span><span class="token comment" spellcheck="true">// prot "456"（访问到了原型链）</span></code></pre><p>摘自:</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">https://developer.mozilla.org/zhCN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></p><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频:"></a>参考视频:</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/TLlGhogq56Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/c-I5S_zTwAc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>## 可供参考的网站:<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Dom</title>
      <link href="/2019/12/06/javascript-dom-de-zhi-shi-cun-chu/"/>
      <url>/2019/12/06/javascript-dom-de-zhi-shi-cun-chu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wx2.sinaimg.cn/mw690/006AeIDuly1g9n8f6lcruj30z00ibgtq.jpg" alt="[https://wx2.sinaimg.cn/mw690/006AeIDuly1g9n8f6lcruj30z00ibgtq.jpg](https://wx2.sinaimg.cn/mw690/006AeIDuly1g9n8f6lcruj30z00ibgtq.jpg)"></p><p>DOM（Document Object Model）的缩写，即文档对象模型。是针对XML并经过扩展用于HTML的应用程序编程接口（API）</p><p>所以DOM本质上是一种接口（API)，是专门操作网页内容的API标准</p><p>DOM把整个页面映射为一个多层节点结构，HTML或XML页面中的每个组成部分都是某种类型的节点。借助DOM提供的API，开发人员可以删除、添加、替换或修改任何节点</p><p><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9n7nyksofj30nj0aaad5.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9n7nyksofj30nj0aaad5.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9n7nyksofj30nj0aaad5.jpg)"></p><p>上图所示的window节点即为最原初的节点,它下面是history,document,screen三个节点（还有其他节点，未全部列出）,body节点属于document节点,即为html中的<code>&lt;body&gt;&lt;/body&gt;</code>。</p><h2 id="Interacting-with-DOM"><a href="#Interacting-with-DOM" class="headerlink" title="Interacting with DOM"></a>Interacting with DOM</h2><ol><li>change/remove HTML elements in the DOM / on the page</li><li>change&amp;add CSS styles to elements</li><li>Read&amp;change element attributes(href,src,alt,custom)</li><li>Create new HTML elements elements and insert them into DOM/page</li><li>Attach event listeners to elements(click,keypress,submit)</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>window.document.getElementById()中window可以省略。</p><p>在浏览器的开发人员工具(F12)的console中可以输入节点来查询浏览器提供的当前页面对应节点的DOM。</p><p><img src="https://wx1.sinaimg.cn/mw690/006AeIDugy1g9o6vpudo3j30wv0h50t7.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDugy1g9o6vpudo3j30wv0h50t7.jpg](https://wx1.sinaimg.cn/mw690/006AeIDugy1g9o6vpudo3j30wv0h50t7.jpg)"></p><p>这也就是JSP在查询DOM时使用的方法。</p><p>也可以写document.getElementById(‘page-banner’)等方法来查询。</p><p>在Console（控制台）中可以按shift+enter来换行。</p><p>在控制台上输出信息：console.log(“Hello!”)，console.log() 方法用于在控制台输出信息。</p><h2 id="Get-Element"><a href="#Get-Element" class="headerlink" title="Get Element"></a>Get Element</h2><h3 id="Get-Element-By-Id"><a href="#Get-Element-By-Id" class="headerlink" title="Get Element By Id"></a>Get Element By Id</h3><p>用document.getElementById(‘elementID’)</p><p>如果想在下文也用到，可以将document.getElementById(‘the id you want’)的结果储存在一个变量中。</p><p>例如：var banner = document.getElementById(‘page-banner’);</p><p>再次调用banner时就等于调用了对应的元素</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-banner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Bookorama<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Books for Fltornado<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search books..<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Get-Elements-by-Class-or-Tag-Name"><a href="#Get-Elements-by-Class-or-Tag-Name" class="headerlink" title="Get Elements by Class or Tag Name"></a>Get Elements by Class or Tag Name</h3><h4 id="By-Class-Name"><a href="#By-Class-Name" class="headerlink" title="By Class Name"></a>By Class Name</h4><p>用document.getElementsByClassName(‘classname’)</p><p>同样也可以将结果储存在一个变量中。</p><ol><li><img src="https://wx2.sinaimg.cn/mw690/006AeIDuly1g9o7u7txcuj30gr06kgms.jpg" alt="img"></li></ol><p>若有多个元素被选择，返回的是一个HTMLCollection(集合),可以用HTMLCollection[num]来选择集合中的元素。</p><p>例如，titles[0]就是选择h1。</p><h4 id="By-Tag-Name"><a href="#By-Tag-Name" class="headerlink" title="By Tag Name"></a>By Tag Name</h4><p>document.getElementsByTagName(‘Tag Name’)</p><h3 id="Get-Element-Tips"><a href="#Get-Element-Tips" class="headerlink" title="Get Element Tips:"></a>Get Element Tips:</h3><p>获取了多元素的集合后可以用循环来分别读取集合中的元素。(常用forEach循环)</p><p>如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><p>就是读取titles集合中的每一个元素，然后在console里面输出。</p><p>Array.isArray(obj)用于确定传递的值是否是一个 Array(数组)</p><p>如:</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">"foobar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span></code></pre><p>Array.from()方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><p>把类似数组的对象转换为对应的数组。</p><p>如：</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ "f", "o", "o" ]</span></code></pre><p>与Array.from(titles)，titles是集合。</p><p>对于Array（数组），可以用Array.forEach(){}方法来遍历数组。</p><p>如:</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="The-Query-Selector"><a href="#The-Query-Selector" class="headerlink" title="The Query Selector"></a>The Query Selector</h2><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h3><p>document.querySelector(<em>CSS selectors</em>)     放入css选择器</p><p>querySelector() 方法返回文档中匹配指定 CSS 选择器的一个元素。</p><p>获取文档中 id=”demo” 的元素：</p><p>document.querySelector(“#demo”);</p><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h3><pre class=" language-javascript"><code class="language-javascript">elementList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selectors<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>elementList 是一个静态的 NodeList 类型的对象。</li><li>selectors 是一个由逗号连接的包含一个或多个 CSS 选择器的字符串。</li></ul><p>querySelectorAll() 方法返回文档中匹配指定 CSS 选择器的所有元素，返回 NodeList 对象。</p><p>NodeList 对象表示节点的集合。可以通过索引访问，索引值从 0 开始。</p><p>获取文档中 class=”example” 的所有元素:</p><p>var x = document.querySelectorAll(“.example”);</p><p>获取文档中所有的 <code>&lt;h2&gt;,</code> <code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code>元素：</p><p>var x = document.querySelectorAll(“h2, div, span”);</p><h3 id="query-Selector-Tips"><a href="#query-Selector-Tips" class="headerlink" title="query Selector Tips:"></a>query Selector Tips:</h3><p>querySelector() 方法仅仅返回匹配指定选择器的第一个元素。如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代。</p><p>可以使用 NodeList 对象的 length 属性来获取匹配选择器的元素属性，然后你可以遍历所有元素，从而获取你想要的信息。</p><p>多个选择器使用逗号(,)分隔。</p><p>querySelectorAll() 方法,即使只匹配到了一个元素也会以NodeList的形式返回。</p><p>NodeList可以直接用.forEach()方法</p><h2 id="querySelector系列和getElement系列区别"><a href="#querySelector系列和getElement系列区别" class="headerlink" title="querySelector系列和getElement系列区别"></a>querySelector系列和getElement系列区别</h2><h3 id="querySelector系列"><a href="#querySelector系列" class="headerlink" title="querySelector系列"></a>querySelector系列</h3><p>属于 W3C 中的 Selectors API 规范<br>querySeletor()返回一个对象<br>querySelectorAll()返回一个集合（NodeList）<br>参数均为：css selector字符串</p><pre class=" language-jsp"><code class="language-jsp">获取页面I属性D为test的元素：    document.querySelector("#test");    document.querySelectorAll("#test")[0];获取页面class属性为”red”的元素:    document.querySelector('.red')    document.querySelectorAll('.red')</code></pre><h3 id="getElement系列"><a href="#getElement系列" class="headerlink" title="getElement系列"></a>getElement系列</h3><p>属于 W3C 的 DOM 规范<br>getElementById()<br>getElementsByName()<br>getElementsByTagName()<br>getElementsByClassName()<br>参数为单一的id、tagName等</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>querySelectorAll 返回的是一个 Static Node List<br>getElementsBy 系列的返回的是一个 Live Node List</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Demo 1</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    lis <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Demo 2</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     lis <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>Demo 1 中的 lis 是一个静态的 Node List，是一个 li 集合的快照，对文档的任何操作都不会对其产生影响。<br>Demo 2 中的 lis 是一个动态的 Node List， 每一次调用 lis 都会重新对文档进行查询，导致无限循环的问题。</p><p>再来看一个：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Demo1</span><span class="token keyword">var</span> temp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"new_class"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Demo2</span><span class="token keyword">var</span> temp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max<span class="token operator">=</span>temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"new_class"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>假如获取到的temp的长度都为3，<br>Demo1能将三个元素的className全部更改为new_class”，<br>Demo2只能讲第一个元素和第三个元素的className更改为”new_class”.</p><p>原文链接：<a href="https://blog.csdn.net/u012937029/article/details/68946190" target="_blank" rel="noopener">https://blog.csdn.net/u012937029/article/details/68946190</a></p><p>其实大部分的时候这两种方法是可以互换的，这里介绍一下两者的不同之处。</p><p>其实这两种方法的区别就是获取动态集合和静态集合的关系。</p><ul><li>getElementById()（getXXXByXX）获取动态集合：通过函数获取元素之后，元素之后的改变还是会动态添加到已经获取的这个元素中。换句话说，通过这个方法获取到元素存储到变量的时候，以后每一次在Javascript函数中使用这个变量的时候都会再去访问一下这个变量对应的html元素。</li><li>querySelector()获取静态集合：通过函数获取元素之后，元素之后的改变并不会影响之前获取后存储到的变量。也就是获取到元素之后就和html中的这个元素没有关系了。</li></ul><p>querySelector（querySelectorAll）获取到元素之后，不论html元素再怎么改变，这个变量并不会随之发生改变，这个变量已经和html元素没有任何关系了。</p><p>这就是JavaScript中querySelector()和getElementById()（getXXXByXX）的区别，虽然大部分时间两者可以互换，但是最好在使用的过程中先斟酌一下是否可以使用其中的某一个，避免出现死循环导致程序都关不了。</p><p>原文链接：<a href="https://www.cnblogs.com/guo-xu/p/10839751.html" target="_blank" rel="noopener">https://www.cnblogs.com/guo-xu/p/10839751.html</a></p><h2 id="NodeList和HTMLCollection区别"><a href="#NodeList和HTMLCollection区别" class="headerlink" title="NodeList和HTMLCollection区别"></a>NodeList和HTMLCollection区别</h2><ul><li><strong><code>HTMLCollection</code>和<code>NodeList</code>的共同点显而易见：</strong><ol><li>都是类数组对象，都有<code>length</code>属性</li><li>都有共同的方法：<code>item</code>，可以通过<code>item(index)</code>或者<code>item(id)</code>来访问返回结果中的元素</li><li>都是实时变动的（live），document上的更改会反映到相关对象上（例外：<code>document.querySelectorAll</code>返回的<code>NodeList</code>不是实时的）</li></ol></li><li><strong><code>HTMLCollection</code>和<code>NodeList</code>的区别是：</strong><ol><li><code>NodeList</code>可以包含任何节点类型，<code>HTMLCollection</code>只包含元素节点（elementNode），elementNode就是HTML中的标签</li><li>HTMLCollection比NodeList多一项方法：namedItem，可以通过传递id或name属性来获取节点信息</li><li>NodeList可以直接用.forEach()方法，而HTMLCollection要先通过Array.from(HTMLCollection)转换为数组后才能用.forEach()方法：Array.from(HTMLCollection).forEach()</li></ol></li></ul><h2 id="Change-Text-amp-HTML-Content"><a href="#Change-Text-amp-HTML-Content" class="headerlink" title="Change Text &amp; HTML Content"></a>Change Text &amp; HTML Content</h2><h3 id="Change-Text-Content"><a href="#Change-Text-Content" class="headerlink" title="Change Text Content"></a>Change Text Content</h3><pre class=" language-jsp"><code class="language-jsp">var books = document.querySelectorAll('#book-list li .name');books.forEach(function(book){    book.textContent = 'test';})示例代码</code></pre><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>在控制台输出book对应的元素的文本内容。</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre class=" language-jsp"><code class="language-jsp">book.textContent = 'test';把book对应的元素的文本内容改为‘test’</code></pre><h4 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h4><pre class=" language-jsp"><code class="language-jsp">book.textContent += 'test';在book对应的元素的文本内容后加上‘test’</code></pre><h3 id="Change-HTML-Content"><a href="#Change-HTML-Content" class="headerlink" title="Change HTML Content"></a>Change HTML Content</h3><pre class=" language-jsp"><code class="language-jsp">const bookList = document.querySelector('#book-list');console.log(bookList.innerHTML);示例代码</code></pre><pre class=" language-jsp"><code class="language-jsp">console.log(bookList.innerHTML);在控制台输出bookList对应的元素里面的HTML（不包括元素自身的HTML）</code></pre><h4 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h4><pre class=" language-javascript"><code class="language-javascript">bookList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;h2>123456&lt;/h2>'</span><span class="token punctuation">;</span>把bookList对应的元素里面的HTML修改为<span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></code></pre><h4 id="追加-1"><a href="#追加-1" class="headerlink" title="追加"></a>追加</h4><pre class=" language-javascript"><code class="language-javascript">bookList<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;h2>123456&lt;/h2>'</span><span class="token punctuation">;</span>在bookList对应的元素里面的HTML追加<span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></code></pre><h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><p>当谈到DOM时差不多所有的东西都是Node（节点），</p><p>如<code>&lt;html&gt;&lt;/html&gt;,&lt;head&gt;&lt;/head&gt;</code>等等，都是一个节点。</p><p>当我们访问，获取那些元素的时候就是在访问，获取对应的节点。</p><p>但上述的元素（element）只是一种节点，还有很多其他种类的节点。</p><p>如text node（比如两个div标记中的text），注释（<code>&lt;!----&gt;</code>）,</p><p>属性（比如div的id，class）等。</p><h3 id="Node-Type"><a href="#Node-Type" class="headerlink" title="Node Type"></a>Node Type</h3><p>文档、元素、属性以及 HTML 或 XML 文档的其他方面拥有不同的节点类型。</p><p>存在 12 种不同的节点类型，其中可能会有不同节点类型的子节点：</p><table><thead><tr><th align="left">节点类型</th><th align="left">描述</th><th align="left">子节点</th><th></th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Element</td><td align="left">代表元素</td><td>Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference</td></tr><tr><td align="left">2</td><td align="left">Attr</td><td align="left">代表属性</td><td>Text, EntityReference</td></tr><tr><td align="left">3</td><td align="left">Text</td><td align="left">代表元素或属性中的文本内容。</td><td>None</td></tr><tr><td align="left">4</td><td align="left">CDATASection</td><td align="left">代表文档中的 CDATA 部分（不会由解析器解析的文本）。</td><td>None</td></tr><tr><td align="left">5</td><td align="left">EntityReference</td><td align="left">代表实体引用。</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td align="left">6</td><td align="left">Entity</td><td align="left">代表实体。</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td align="left">7</td><td align="left">ProcessingInstruction</td><td align="left">代表处理指令。</td><td>None</td></tr><tr><td align="left">8</td><td align="left">Comment</td><td align="left">代表注释。</td><td>None</td></tr><tr><td align="left">9</td><td align="left">Document</td><td align="left">代表整个文档（DOM 树的根节点）。</td><td>Element, ProcessingInstruction, Comment, DocumentType</td></tr><tr><td align="left">10</td><td align="left">DocumentType</td><td align="left">向为文档定义的实体提供接口</td><td>None</td></tr><tr><td align="left">11</td><td align="left">DocumentFragment</td><td align="left">代表轻量级的 Document 对象，能够容纳文档的某个部分</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td align="left">12</td><td align="left">Notation</td><td align="left">代表 DTD 中声明的符号。</td><td>None</td></tr></tbody></table><p>对于每种节点类型，nodeName 和 nodeValue 属性的返回值：</p><table><thead><tr><th align="left">节点类型</th><th align="left">nodeName 返回</th><th align="left">nodeValue 返回</th><th></th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Element</td><td align="left">元素名</td><td>null</td></tr><tr><td align="left">2</td><td align="left">Attr</td><td align="left">属性名称</td><td>属性值</td></tr><tr><td align="left">3</td><td align="left">Text</td><td align="left">#text</td><td>节点的内容</td></tr><tr><td align="left">4</td><td align="left">CDATASection</td><td align="left">#cdata-section</td><td>节点的内容</td></tr><tr><td align="left">5</td><td align="left">EntityReference</td><td align="left">实体引用名称</td><td>null</td></tr><tr><td align="left">6</td><td align="left">Entity</td><td align="left">实体名称</td><td>null</td></tr><tr><td align="left">7</td><td align="left">ProcessingInstruction</td><td align="left">target</td><td>节点的内容</td></tr><tr><td align="left">8</td><td align="left">Comment</td><td align="left">#comment</td><td>注释文本</td></tr><tr><td align="left">9</td><td align="left">Document</td><td align="left">#document</td><td>null</td></tr><tr><td align="left">10</td><td align="left">DocumentType</td><td align="left">文档类型名称</td><td>null</td></tr><tr><td align="left">11</td><td align="left">DocumentFragment</td><td align="left">#document 片段</td><td>null</td></tr><tr><td align="left">12</td><td align="left">Notation</td><td align="left">符号名称</td><td>null</td></tr></tbody></table><h3 id="查询nodeType"><a href="#查询nodeType" class="headerlink" title="查询nodeType"></a>查询nodeType</h3><pre class=" language-jsp"><code class="language-jsp">const banner = document.querySelector('#page-banner');console.log('#page-banner node type is:',banner.nodeType);上述代码就会在console中显示banner的nodeType</code></pre><h3 id="查询node-Name"><a href="#查询node-Name" class="headerlink" title="查询node Name"></a>查询node Name</h3><pre class=" language-jsp"><code class="language-jsp">console.log('#page-banner node Name is:',banner.nodeName);在console中显示banner的nodeName</code></pre><h3 id="查询node是否有子节点"><a href="#查询node是否有子节点" class="headerlink" title="查询node是否有子节点"></a>查询node是否有子节点</h3><pre class=" language-jsp"><code class="language-jsp">console.log('#page-banner has child nodes:',banner.hasChildNodes());在console中显示banner是否有子节点，有显示true，无则false</code></pre><h3 id="clone-Node"><a href="#clone-Node" class="headerlink" title="clone Node"></a>clone Node</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><pre><code>var dupNode = node.cloneNode([deep]);</code></pre><ul><li><p><code>node</code></p><p>The node to be cloned.</p></li><li><p><code>dupNode</code></p><p>The new node that will be a clone of node</p></li><li><p>deep Optional</p><p>true if the children of the node should also be cloned, or false to clone only the specified node.</p></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class=" language-jsp"><code class="language-jsp">const clonedBanner = banner.cloneNode(false);console.log(clonedBanner);上述只克隆了banner这一节点，未克隆它里面的子节点。从console中的输出能看出来。</code></pre><h2 id="Traversing-the-DOM"><a href="#Traversing-the-DOM" class="headerlink" title="Traversing the DOM"></a>Traversing the DOM</h2><h3 id="From-child-to-parent-or-parent-to-child"><a href="#From-child-to-parent-or-parent-to-child" class="headerlink" title="From child to parent or parent to child"></a>From child to parent or parent to child</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bookList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#book-list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"the parent node is:"</span><span class="token punctuation">,</span>bookList<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>console中输出bookList节点的父节点。console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"the parent element is:"</span><span class="token punctuation">,</span>bookList<span class="token punctuation">.</span>parentElement<span class="token punctuation">)</span><span class="token punctuation">;</span>console中输出bookList节点的父元素。console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bookList<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>console中输出：<span class="token number">0</span><span class="token punctuation">:</span> textassignedSlot<span class="token punctuation">:</span> <span class="token keyword">null</span>baseURI<span class="token punctuation">:</span> <span class="token string">"file:///H:/mycodehub/webexercise/JSP-DOM%20Bookorma/index.html"</span>childNodes<span class="token punctuation">:</span> NodeList <span class="token punctuation">[</span><span class="token punctuation">]</span>data<span class="token punctuation">:</span> "↵    上面是输出的一部分，第一个text节点的data是↵代表换行（line <span class="token keyword">break</span>）console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bookList<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>console中输出bookList的子元素。在操纵HTML文档时，操纵子元素比子节点方便。</code></pre><h3 id="From-sibling-to-sibling"><a href="#From-sibling-to-sibling" class="headerlink" title="From sibling to sibling"></a>From sibling to sibling</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bookList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#book-list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"book-list next sibling is:"</span><span class="token punctuation">,</span>bookList<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>console中输出bookList的下一个兄弟节点。console中显示的是：book<span class="token operator">-</span>list next sibling is<span class="token punctuation">:</span> #text#text展开里面有：assignedSlot<span class="token punctuation">:</span> <span class="token keyword">null</span>baseURI<span class="token punctuation">:</span> <span class="token string">"file:///H:/mycodehub/webexercise/JSP-DOM%20Bookorma/index.html"</span>childNodes<span class="token punctuation">:</span> NodeList <span class="token punctuation">[</span><span class="token punctuation">]</span>data<span class="token punctuation">:</span> <span class="token string">"↵        "</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"book-list"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"add-book"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>由于div元素后有一个换行再到form元素，所以div的后一个兄弟节点#text的data为↵，是换行符。console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"book-list next Element sibling is:"</span><span class="token punctuation">,</span>bookList<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>console中输出下一个兄弟元素<span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"add-book"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>类似上述console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"book-list previous sibling is:"</span><span class="token punctuation">,</span>bookList<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"book-list previous Element sibling is:"</span><span class="token punctuation">,</span>bookList<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>可以分别在console中输出bookList的前一个兄弟节点与前一个兄弟元素。bookList<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;/br>Too cool for everyone else!'</span><span class="token punctuation">;</span>可以在bookList的前一个兄弟元素的<span class="token operator">&lt;</span>p<span class="token operator">></span>里面的HTML后加上<span class="token operator">&lt;</span><span class="token operator">/</span>br<span class="token operator">></span>Too cool <span class="token keyword">for</span> everyone <span class="token keyword">else</span><span class="token operator">!</span></code></pre><h3 id="parentNode与parentElement的区别"><a href="#parentNode与parentElement的区别" class="headerlink" title="parentNode与parentElement的区别"></a>parentNode与parentElement的区别</h3><p>parentNode是w3c标准。</p><p>parentElement的浏览器兼容性：</p><p>查询：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/parentElement" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Node/parentElement</a></p><p>当父节点的nodeType不是1，即不是element节点的话，它的parentElement就会是null</p><p>一般情况parentNode可以取代parentElement的所有功能</p><p>parentElement匹配的是parent为element的情况，而parentNode匹配的则是parent为node的情况。element是包含在node里的，它的nodeType是1</p><p>转自：<a href="https://www.cnblogs.com/zhishaofei/p/4091865.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhishaofei/p/4091865.html</a></p><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> h2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#book-list h2'</span><span class="token punctuation">)</span>h2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>用JS给h2元素加上click事件监听器与响应函数鼠标点击h2时，console会输出e<span class="token punctuation">.</span>target与e（被加载该事件的目标与事件）e：MouseEvent <span class="token punctuation">{</span>isTrusted<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> screenX<span class="token punctuation">:</span> <span class="token number">2164</span><span class="token punctuation">,</span> screenY<span class="token punctuation">:</span> <span class="token number">620</span><span class="token punctuation">,</span> clientX<span class="token punctuation">:</span> <span class="token number">244</span><span class="token punctuation">,</span> clientY<span class="token punctuation">:</span> <span class="token number">302</span><span class="token punctuation">,</span> …<span class="token punctuation">}</span>其中有一项是shiftKey<span class="token punctuation">:</span> <span class="token boolean">false</span>当点击h2并按下shift键时，该项值就为<span class="token boolean">true</span>。还有一项是target<span class="token punctuation">:</span> h2<span class="token punctuation">.</span>title代表该事件的目标是<span class="token operator">&lt;</span>h2<span class="token operator">></span>它的<span class="token keyword">class</span>是title。</code></pre><h3 id="Event-对象"><a href="#Event-对象" class="headerlink" title="Event 对象"></a>Event 对象</h3><p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p><p>什么时候会产生Event 对象呢? </p><ul><li>例如: 当用户单击某个元素的时候,我们给这个元素注册的事件就会触发,该事件的本质就是一个函数,而该函数的形参接收一个event对象.</li></ul><p>使用场景即：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> oDIv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oDiv<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="删除HTML内容"><a href="#删除HTML内容" class="headerlink" title="删除HTML内容"></a>删除HTML内容</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'#book-list .delete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> li <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>        li<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>在JS中删除东西通过parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>删除。上述代码会给btns这NodeList中的每一个Node添加cilick事件监听，并设置上述响应函数。当NodeList中的li被点击时它就会被删除。</code></pre><h3 id="prevent-default-method-on-the-event-object"><a href="#prevent-default-method-on-the-event-object" class="headerlink" title="prevent default method on the event object"></a>prevent default method on the event object</h3><p>preventDefault() 方法取消事件的默认动作。</p><p>该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。例如，如果 type 属性是 “submit”，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class=" language-javascript"><code class="language-javascript">event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#page-banner a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'navigation to'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span><span class="token string">'was prevented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>上述代码在a元素上加了click事件监听器与上述响应函数。当点击a元素时，不会触发默认动作（跳转到链接的网页）然后在console中输出对应的字符串。</code></pre><p>更多的HTML DOM 事件可以访问：<a href="https://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noopener">https://www.runoob.com/jsref/dom-obj-event.html</a></p><h2 id="Event-Bubbling"><a href="#Event-Bubbling" class="headerlink" title="Event Bubbling"></a>Event Bubbling</h2><p>事件冒泡</p><p>事件开始时由最具体的元素(文档中嵌套层次最深的那个节点)接收，然后逐级向上传播到较为不具体的节点(文档)。所有现代浏览器都支持事件冒泡，并且会将事件一直冒泡到window对象。</p><p><img src="https://img-blog.csdnimg.cn/20190225140611706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0NjU5MzQ=,size_16,color_FFFFFF,t_70" alt="img"></p><p>转自:<a href="https://blog.csdn.net/u014465934/article/details/87915995" target="_blank" rel="noopener">https://blog.csdn.net/u014465934/article/details/87915995</a></p><p><strong>Event bubbling</strong></p><p>When you use event bubbling</p><pre class=" language-js"><code class="language-js">               <span class="token operator">/</span> \<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span> element1     <span class="token operator">|</span> <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span>   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token operator">|</span>element2  <span class="token operator">|</span> <span class="token operator">|</span>          <span class="token operator">|</span>     <span class="token operator">|</span><span class="token operator">|</span>   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>     <span class="token operator">|</span><span class="token operator">|</span>        Event BUBBLING           <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></code></pre><p>the event handler of element2 fires first, the event handler of element1 fires last.</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>如果要给ul下的每一个li下的button都添加事件监听器，</p><p>用循环去依次添加EventListener在li多的情况会花费过多的时间。</p><p>而用Event bubbling的原理直接在ul上添加一个EventListener就可以解决问题。</p><hr><p>如果用循环去给ul下的每一个li下的button都添加事件监听器，</p><p>之后在页面未刷新的情况下再插入新的同样格式的li,</p><p>点击该li的button将不会触发响应函数，该button未被添加EventListener，</p><p>而用Event bubbling的原理直接在ul上添加一个EventListener就可以解决问题。</p><hr><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#book-list ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">==</span> <span class="token string">'delete'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> li <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// li.parentNode.removeChild(li);这种也可以</span>        list<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>上述代码给ul添加了EventListener当点击了li的<span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"delete"</span><span class="token operator">></span>时才会删除该li，否则点击文本内容也执行删除操作不符合我们的设想。</code></pre><h3 id="What-is-event-bubbling-and-capturing"><a href="#What-is-event-bubbling-and-capturing" class="headerlink" title="What is event bubbling and capturing?"></a>What is event bubbling and capturing?</h3><p>参考：<a href="https://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing" target="_blank" rel="noopener">https://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing</a></p><p>与 <a href="https://blog.csdn.net/one_and_one/article/details/89307504" target="_blank" rel="noopener">https://blog.csdn.net/one_and_one/article/details/89307504</a></p><h2 id="Interacting-with-Form"><a href="#Interacting-with-Form" class="headerlink" title="Interacting with Form"></a>Interacting with Form</h2><h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//add book-list</span><span class="token keyword">const</span> addForm <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">'add-book'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>addForm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> addForm<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="text"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>上述代码获取了id为add<span class="token operator">-</span>book的form，然后对其添加了submit事件监听，当点击form中的button时阻止了它默认的submit响应，然后在console中输出type为text的input的value</code></pre><h3 id="Interacting-with-Form-Tips"><a href="#Interacting-with-Form-Tips" class="headerlink" title="Interacting with Form Tips"></a>Interacting with Form Tips</h3><h4 id="one-nifty-trick-to-query-the-DOM-to-find-the-forms"><a href="#one-nifty-trick-to-query-the-DOM-to-find-the-forms" class="headerlink" title="one nifty trick to query the DOM to find the forms:"></a>one nifty trick to query the DOM to find the forms:</h4><p>相较于document.getELementById/Class这种繁琐的写法</p><p>可以直接写document.forms</p><p>它会返回一个HTMLCollection，可以通过[index]与[‘id of the form’]来访问对应的元素。</p><h4 id="点击form-表单中的button导致页面刷新问题"><a href="#点击form-表单中的button导致页面刷新问题" class="headerlink" title="点击form 表单中的button导致页面刷新问题"></a>点击form 表单中的button导致页面刷新问题</h4><p>点击按钮的时候每次都刷新页面 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- ... --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>原因分析：</p><p>在form表单里的button，不给button添加type属性，点击按钮，button的类型会默认为submit，会默认提交表单并刷新页面。</p><p>将input或者button的type属性改为button，点击按钮页面就不会自动重新加载了。</p><h2 id="Creating-Elements"><a href="#Creating-Elements" class="headerlink" title="Creating Elements"></a>Creating Elements</h2><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//add book-list</span><span class="token keyword">const</span> addForm <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">'add-book'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>addForm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> addForm<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="text"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//create elements</span>    <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bookName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> deleteBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//add content</span>    deleteBtn<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'delete'</span><span class="token punctuation">;</span>    deleteBtn<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'delete'</span><span class="token punctuation">;</span>    bookName<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//append to document</span>    li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>bookName<span class="token punctuation">)</span><span class="token punctuation">;</span>    li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>deleteBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>上述代码创建了一个li元素，两个span元素，并给deleteBtn这span元素加了<span class="token keyword">delete</span>文本与deleteclassname把input文本框中的内容赋给了li的textContent然后把两个span元素追加到li中作为子元素最后把组装好的li元素追加到ul</code></pre><h3 id="document-createElement（）"><a href="#document-createElement（）" class="headerlink" title="document.createElement（）"></a>document.createElement（）</h3><p>这是动态的在HTML中添加一个元素的方法</p><p>document.createElement()是在对象中创建一个对象，要与appendChild() 或 insertBefore()方法联合使用。</p><p>其中，appendChild() 方法在节点的子节点列表末添加新的子节点。</p><p>insertBefore() 方法在节点的子节点列表任意位置插入新的节点。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>document.createElement(<em>nodename</em>)</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>nodename</em></td><td align="left">String</td><td align="left">必须。创建元素的名称。</td></tr></tbody></table><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">元素对象</td><td align="left">创建的元素节点</td></tr></tbody></table><h2 id="DOM-insertBefore-方法"><a href="#DOM-insertBefore-方法" class="headerlink" title="DOM insertBefore() 方法"></a>DOM insertBefore() 方法</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>insertBefore() 方法在您指定的已有子节点之前插入新的子节点。</p><p><strong>提示：</strong>如果您希望创建包含文本的新列表项，请记得创建文本节点形式的文本，以便追加到 LI 元素中，然后向列表插入这个 LI。</p><p>您也可以使用 insertBefore 方法插入/移动已有元素。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>把一个列表项从一个列表移动到另一个中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> node<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span><span class="token keyword">var</span> list<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>list<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>插入之前：</p><pre><code>CoffeeTeaWaterMilk</code></pre><p>插入之后：</p><pre><code>MilkCoffeeTeaWater</code></pre><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>node.insertBefore(newnode,existingnode)</code></pre><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>newnode</em></td><td align="left">Node 对象</td><td align="left">必需。需要插入的节点对象。</td></tr><tr><td align="left"><em>existingnode</em></td><td align="left">Node object</td><td align="left">可选。在其之前插入新节点的子节点。如果未规定，则 insertBefore 方法会在结尾插入 newnode。</td></tr></tbody></table><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Node 对象。</td><td align="left">您插入的节点。</td></tr></tbody></table><h2 id="Change-Style-amp-Class"><a href="#Change-Style-amp-Class" class="headerlink" title="Change Style &amp; Class"></a>Change Style &amp; Class</h2><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//add classes</span>    bookName<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    deleteBtn<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'delete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上述代码给bookName与deleteBtn分别加了name与deleteclass为 <span class="token operator">&lt;</span>div<span class="token operator">></span> 元素添加 <span class="token keyword">class</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDIV"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mystyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>也可以deleteBtn<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'delete'</span><span class="token punctuation">;</span></code></pre><h3 id="DOM-classList-属性"><a href="#DOM-classList-属性" class="headerlink" title="DOM classList 属性"></a>DOM classList 属性</h3><h4 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>classList 属性返回元素的类名，作为 DOMTokenList 对象。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。</p><p>classList 属性是只读的，但你可以使用 add() 和 remove() 方法修改它。</p><hr><p><code>DOMTokenList</code> 接口表示一组空格分隔的标记（tokens）。如由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList" target="_blank" rel="noopener"><code>Element.classList</code></a>、<code>HTMLLinkElement.relList</code>、<code>HTMLAnchorElement.relList</code> 或 <code>HTMLAreaElement.relList</code> 返回的一组值。它和 JavaScript <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a> 对象一样，索引从 0 开始。<code>DOMTokenList</code> 总是区分大小写（case-sensitive）。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><p><em>element</em>.classList</p><p>更多classList的方法访问：<a href="https://www.runoob.com/jsref/prop-element-classlist.html" target="_blank" rel="noopener">https://www.runoob.com/jsref/prop-element-classlist.html</a></p><h3 id="DOM-className-属性"><a href="#DOM-className-属性" class="headerlink" title="DOM className 属性"></a>DOM className 属性</h3><h4 id="定义和用法-2"><a href="#定义和用法-2" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>className 属性设置或返回元素的 class 属性。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><pre><code>object.className=classname</code></pre><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h3><h4 id="定义和用法-3"><a href="#定义和用法-3" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>getAttribute() 方法返回指定属性名的属性值。</p><p><strong>提示：</strong>如果您希望以 Attr 对象返回属性，请使用 getAttributeNode。</p><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><pre><code>element.getAttribute(attributename)</code></pre><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>attributename</em></td><td align="left">字符串值。</td><td align="left">必需。需要获得属性值的属性名称。</td></tr></tbody></table><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">String</td><td align="left">指定属性的值。</td></tr></tbody></table><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript">book<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span>返回值：<span class="token string">"name"</span></code></pre><h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h3><h4 id="定义和用法-4"><a href="#定义和用法-4" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>setAttribute() 方法添加指定的属性，并为其赋指定的值。</p><p>如果这个指定的属性已存在，则仅设置/更改值。</p><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><pre><code>element.setAttribute(attributename,attributevalue)</code></pre><h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>attributename</em></td><td align="left">String</td><td align="left">必需。您希望添加的属性的名称。</td></tr><tr><td align="left"><em>attributevalue</em></td><td align="left">String</td><td align="left">必需。您希望添加的属性值。</td></tr></tbody></table><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><p>无返回值。</p><h4 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript">book<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'name-2'</span><span class="token punctuation">)</span></code></pre><h3 id="hasAttribute"><a href="#hasAttribute" class="headerlink" title="hasAttribute"></a>hasAttribute</h3><h4 id="定义和用法-5"><a href="#定义和用法-5" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>如果存在指定属性，则 hasAttribute() 方法返回 true，否则返回 false。</p><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><pre><code>element.hasAttribute(attributename)</code></pre><h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>attributename</em></td><td align="left">字符串值。</td><td align="left">必需。需要检查是否存在的属性名称。</td></tr></tbody></table><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h4><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Boolean</td><td align="left">如果存在该属性，则返回 true，否则返回 false。</td></tr></tbody></table><h4 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript">book<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span>返回值：<span class="token boolean">true</span></code></pre><h3 id="removeAttribute"><a href="#removeAttribute" class="headerlink" title="removeAttribute"></a>removeAttribute</h3><h4 id="定义和用法-6"><a href="#定义和用法-6" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>removeAttribute() 方法删除指定的属性。</p><p>此方法与 removeAttributeNode() 方法的差异是：removeAttributeNode() 方法删除指定的 Attr 对象，</p><p>而此方法删除具有指定名称的属性。结果是相同的。</p><p>同时此方法不返回值，而 removeAttributeNode() 方法返回被删除的属性，以 Attr 对象的形式。</p><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><pre><code>element.removeAttribute(attributename)</code></pre><h4 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>attributename</em></td><td align="left">String</td><td align="left">必需。您希望移除的属性的名称。</td></tr></tbody></table><h4 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h4><p>无返回值。</p><h4 id="例子-7"><a href="#例子-7" class="headerlink" title="例子"></a>例子</h4><pre class=" language-javascript"><code class="language-javascript">book<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span></code></pre><h2 id="Checkbox-amp-Change-Event"><a href="#Checkbox-amp-Change-Event" class="headerlink" title="Checkbox &amp; Change Event"></a>Checkbox &amp; Change Event</h2><p>change事件被<code>&lt;input&gt;</code>,<code>&lt;select&gt;</code>, 和<code>&lt;textarea&gt;</code> 元素触发, 当用户提交对元素值的更改时。与  input 事件不同，change 事件不一定会对元素值的每次更改触发。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>事件触发取决于表单元素的类型（type）和用户对标签的操作:</p><ul><li><p>当元素被<code>:checked</code>时（通过点击或者使用键盘）：<code>&lt;input type=&quot;radio&quot;&gt;</code> 和 </p><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code>；</p></li><li><p>当用户完成提交动作时（例如：点击了<code>&lt;select&gt;</code>中的一个选项，从 <code>&lt;input type=&quot;date&quot;&gt;</code>标签选择了一个日期，通过<code>&lt;input type=&quot;file&quot;&gt;</code>标签上传了一个文件，等)；</p></li><li><p>当标签的值被修改并且失焦后，但并未进行提交（例如：对<code>&lt;textarea&gt;</code> 或者<code>&lt;input type=&quot;text&quot;&gt;</code>的值进行编辑后。）。</p></li></ul><p>Different browsers do not always agree whether a <code>change</code> event should be fired for certain types of interaction. For example, keyboard navigation in <code>&lt;select&gt;</code> elements never fires a <code>change</code> event in Gecko until the user hits Enter or switches the focus away from the <code>&lt;select&gt;</code></p><h3 id="例子-8"><a href="#例子-8" class="headerlink" title="例子"></a>例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//hide books</span><span class="token keyword">const</span> hideBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hideBox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hideBox<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"initial"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    上述代码能使hideBox代表的input在触发change事件时执行上述的响应函数：勾选input则list被隐藏，取消勾选list会被显示。display<span class="token punctuation">:</span> initial<span class="token punctuation">;</span>不管父元素怎么设定，恢复到浏览器最初始时的 display属性。</code></pre><h2 id="Custom-Search-Filter"><a href="#Custom-Search-Filter" class="headerlink" title="Custom Search Filter"></a>Custom Search Filter</h2><h3 id="Key-Event"><a href="#Key-Event" class="headerlink" title="Key Event"></a>Key Event</h3><p>按键触发的事件</p><h3 id="例子-9"><a href="#例子-9" class="headerlink" title="例子"></a>例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//filter books</span><span class="token keyword">const</span> searchBar <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">'search-books'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>searchBar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> term <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> books <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> title <span class="token operator">=</span> book<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            book<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            book<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上述代码为对应的input添加了keyup这一事件监听器它的响应函数使得list中只能显示能找到包含input值的书名的li</code></pre><h3 id="Keyup"><a href="#Keyup" class="headerlink" title="Keyup"></a>Keyup</h3><p>当一个按键被释放时，<code>keyup</code>事件被触发。</p><p>另外还有keydown与keypress</p><h3 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf() 方法"></a>indexOf() 方法</h3><h4 id="定义和用法-7"><a href="#定义和用法-7" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</p><h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><pre class=" language-javascript"><code class="language-javascript">stringObject<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchvalue<span class="token punctuation">,</span>fromindex<span class="token punctuation">)</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">searchvalue</td><td align="left">必需。规定需检索的字符串值。</td></tr><tr><td align="left">fromindex</td><td align="left">可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。</p><h4 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h4><p><strong>注释：</strong>indexOf() 方法对大小写敏感！</p><p><strong>注释：</strong>如果要检索的字符串值没有出现，则该方法返回 -1。</p><h2 id="Tabbed-Content"><a href="#Tabbed-Content" class="headerlink" title="Tabbed Content"></a>Tabbed Content</h2><h3 id="例子-10"><a href="#例子-10" class="headerlink" title="例子"></a>例子</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//tabbed content</span><span class="token keyword">const</span> tabs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tabs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> panels <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.panel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tabs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">"LI"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> targetPanel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        panels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>panel <span class="token operator">==</span> targetPanel<span class="token punctuation">)</span><span class="token punctuation">{</span>                panel<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                panel<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>上述代码使得点击tabs所代表的ul元素中的li区域时触发以下事件：先是获取事件的target的data<span class="token operator">-</span>target值然后循环panels所代表的NodeList，检查该panel对应的元素是否与上述data<span class="token operator">-</span>target值一致若一致则为其添加activeclass（显示该元素），否则反之。</code></pre><h3 id="DOM-tagName-属性"><a href="#DOM-tagName-属性" class="headerlink" title="DOM tagName 属性"></a>DOM tagName 属性</h3><h4 id="定义和用法-8"><a href="#定义和用法-8" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>tagName 属性返回元素的标签名。</p><p>HTML 返回 tagName 属性的值是大写的。</p><h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><p><em>element</em>.tagName</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><pre class=" language-javascript"><code class="language-javascript">获取元素的标签名<span class="token punctuation">:</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tagName<span class="token punctuation">;</span>输出结果：P</code></pre><h3 id="DOM对象的dataset属性"><a href="#DOM对象的dataset属性" class="headerlink" title="DOM对象的dataset属性"></a>DOM对象的dataset属性</h3><p>你可能在HTML代码中看到很多人写类似如下的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">data-age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>display name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>其实这是HTML5规范的一部分，DOM对象中有个dataset属性对象，可以在该对象中存一些与该DOM对象相关的数据。如上写法是在生成dom对象时对dataset的一个初始化的动作，dataset中会存在一个id属性和age属性。这里需要注意data-仅仅是一个约定好的前缀，在生成DOM对象时所有已data-开头的属性会将其去掉前缀data-后存在dataset中。</p><p>需要注意的是dataset中的属性值只能是字符串，非字符串会转换为字符串后存储，所以要存对象类型是务必小心。</p><p>原文链接：<a href="https://blog.csdn.net/notejs/article/details/17251245" target="_blank" rel="noopener">https://blog.csdn.net/notejs/article/details/17251245</a></p><p>自定义的数据属性名称是以 <code>data-</code>开头的。 它必须要遵循 <a href="http://www.w3.org/TR/REC-xml/#NT-Name" target="_blank" rel="noopener">the production rule of xml names</a> 规则，该规则是说它只可以包含字母，数字和下面的字符： dash (<code>-</code>), dot (<code>.</code>), colon (<code>:</code>), underscore (<code>_</code>)。此外不应包含ASCII 码大写字母。</p><p>更详细的资料访问：<a href="https://www.cnblogs.com/goloving/p/7835442.html" target="_blank" rel="noopener">https://www.cnblogs.com/goloving/p/7835442.html</a></p><p>与<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset</a></p><h2 id="DOMContentLoaded-Event"><a href="#DOMContentLoaded-Event" class="headerlink" title="DOMContentLoaded Event"></a>DOMContentLoaded Event</h2><h3 id="上述例子的HTML部分的全部的代码"><a href="#上述例子的HTML部分的全部的代码" class="headerlink" title="上述例子的HTML部分的全部的代码"></a>上述例子的HTML部分的全部的代码</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSP DOM Tutorial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-banner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Bookorama<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Books for Fltornado<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https:www.google.com<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>google here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Search books..<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- /header --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Books to Read<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Feiniaoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Here it is<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sister carrie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hide all books<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Add a book..<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabbed-content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#about<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel active<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Content for about tab...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>今日，《英雄联盟》官博公布了新英雄“残月之肃 厄斐琉斯”的介绍视频，该英雄将在今日维护更新后加入游戏。凭借着妹妹拉露恩的祈愿，厄斐琉斯能够使用五种月石<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Content for content tab...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>今日，《英雄联盟》官博公布了新英雄“残月之肃 厄斐琉斯”的介绍视频，该英雄将在今日维护更新后加入游戏。凭借着妹妹拉露恩的祈愿，厄斐琉斯能够使用五种月石<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>可以看到<code>&lt;script src=&quot;app.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; async defer&gt;&lt;/script&gt;</code>加载JS的代码放在了body结束标签之前。</p><p>这是由于要先加载HTML文件产生DOM（DOM fully loaded），才能用JS去操纵DOM。</p><h2 id="参考的视频"><a href="#参考的视频" class="headerlink" title="参考的视频"></a>参考的视频</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/G5Or47gPH-4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><a href="https://www.youtube.com/watch?v=G5Or47gPH-4&list=PL4cUxeGkcC9gfoKa5la9dsdCNpuey2s-V&index=18" target="_blank" rel="noopener">https://www.youtube.com/watch?v=G5Or47gPH-4&amp;list=PL4cUxeGkcC9gfoKa5la9dsdCNpuey2s-V&amp;index=18</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> DOM </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2019/12/05/css-de-zhi-shi-chu-bei/"/>
      <url>/2019/12/05/css-de-zhi-shi-chu-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Cascading-style-sheet"><a href="#CSS-Cascading-style-sheet" class="headerlink" title="CSS - Cascading style sheet"></a>CSS - Cascading style sheet</h1><p>父元素的某些css属性会被子元素继承。</p><p>在css中定义尺寸通常使用px(pixels)作为单位,也可以用%,vh,vw等。</p><p>子元素的style能覆盖父元素的style。</p><p>对于block element可以用width,height来控制它的宽度与高度。</p><p>max-width属性可以定义元素的最大宽度。</p><p>到网上可以查询所有的css属性。</p><h2 id="Colors"><a href="#Colors" class="headerlink" title="Colors"></a>Colors</h2><p>style=”color:颜色名/#十六进制/rgb()/rgba()/hsl()” </p><p>HSL即色相、饱和度、亮度（英语：Hue, Saturation, Lightness）。</p><p>可以用网上的color picker来获取绝大部分颜色。</p><p>background-color:背景颜色</p><p>在设置color时，最好用rgba()，这样更灵活，方便JSP等操作。</p><p>一般来说低级标题要比高级标题颜色要更亮一些，如h2的颜色比h1亮一些。</p><p>可以用background-size:来确定背景的大小，缩放背景图片。</p><h2 id="Gradient-渐变"><a href="#Gradient-渐变" class="headerlink" title="Gradient 渐变"></a>Gradient 渐变</h2><h3 id="linear-gradient-线性渐变"><a href="#linear-gradient-线性渐变" class="headerlink" title="linear-gradient    线性渐变"></a>linear-gradient    线性渐变</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>direction, color-stop<span class="token number">1</span>, color-stop<span class="token number">2</span>, <span class="token number">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用角度"><a href="#使用角度" class="headerlink" title="使用角度"></a>使用角度</h4><p>如果你想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>angle, color-stop<span class="token number">1</span>, color-stop<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p><img src="https://www.runoob.com/wp-content/uploads/2014/07/7B0CC41A-86DC-4E1B-8A69-A410E6764B91.jpg" style="zoom:50%;" /><p><a href="https://www.runoob.com/wp-content/uploads/2014/07/7B0CC41A-86DC-4E1B-8A69-A410E6764B91.jpg" target="_blank" rel="noopener">https://www.runoob.com/wp-content/uploads/2014/07/7B0CC41A-86DC-4E1B-8A69-A410E6764B91.jpg</a></p><p>但是，请注意很多浏览器(Chrome,Safari,friefox等)的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。</p><h4 id="使用透明度（transparent）"><a href="#使用透明度（transparent）" class="headerlink" title="使用透明度（transparent）"></a>使用透明度（transparent）</h4><p>CSS3 渐变也支持透明度（transparent），可用于创建减弱变淡的效果。</p><p>为了添加透明度，我们使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。</p><p>下面的实例演示了从左边开始的线性渐变。起点是完全透明，慢慢过渡到完全不透明的红色：</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>从左到右的线性渐变，带有透明度：</p><p>#grad {  background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); }</p><h4 id="重复的线性渐变"><a href="#重复的线性渐变" class="headerlink" title="重复的线性渐变"></a>重复的线性渐变</h4><p>repeating-linear-gradient() 函数用于重复线性渐变：</p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>一个重复的线性渐变：</p><p>#grad {  /* 标准的语法 */  background-image: repeating-linear-gradient(red, yellow 10%, green 20%); }</p><h3 id="radial-gradient-径向渐变"><a href="#radial-gradient-径向渐变" class="headerlink" title="radial-gradient    径向渐变"></a>radial-gradient    径向渐变</h3><p>径向渐变由它的中心定义。</p><p>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/gradient_radial.jpg" alt="[https://www.runoob.com/wp-content/uploads/2014/07/gradient_radial.jpg](https://www.runoob.com/wp-content/uploads/2014/07/gradient_radial.jpg)"></p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>shape size at position, start-color, <span class="token number">...</span>, last-color<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>径向渐变 - 颜色结点均匀分布（默认情况下）</p><p>#grad {  background-image: radial-gradient(red, yellow, green); }</p><p>径向渐变 - 颜色结点不均匀分布</p><p>#grad {  background-image: radial-gradient(red 5%, yellow 15%, green 60%); }</p><h4 id="设置形状"><a href="#设置形状" class="headerlink" title="设置形状"></a>设置形状</h4><p>shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。</p><p>#grad {  background-image: radial-gradient(circle, red, yellow, green); }</p><h4 id="重复的径向渐变"><a href="#重复的径向渐变" class="headerlink" title="重复的径向渐变"></a>重复的径向渐变</h4><p>repeating-radial-gradient() 函数用于重复径向渐变：</p><p>#grad {  background-image: repeating-radial-gradient(red, yellow 10%, green 15%); }</p><h3 id="Gradient-tips"><a href="#Gradient-tips" class="headerlink" title="Gradient tips:"></a>Gradient tips:</h3><p>如linear-gradient(to right,rgb(94,255,126,),rgba(94,255,126,0))可以实现从左端至右端由rgb(94,255,126,)色向无色的渐变。</p><p>linear-gradient(to top right,rgb(94,255,126,),rgba(94,255,126,0))可以实现向右上的渐变。</p><p>↑为0deg，还可以用角度来控制方向,-90deg为←方向。</p><h2 id="Margin-amp-Padding"><a href="#Margin-amp-Padding" class="headerlink" title="Margin &amp; Padding"></a>Margin &amp; Padding</h2><p>margin，padding的图解可以参考盒子模型。</p><p>可以通过padding-top等来单独控制某一padding</p><p>也可以通过padding：1 2 3 4 （top right bottom left)来单独控制</p><p>margin:1 2 3 4 与padding相似</p><p>margin可以取负值，但使用的时候要小心。</p><h2 id="Display-amp-Float"><a href="#Display-amp-Float" class="headerlink" title="Display &amp; Float"></a>Display &amp; Float</h2><p>style=”float:left/right/none”</p><p>对于float的元素，其他元素布局在它周围</p><p>dispaly:block/inline/none/inline-block</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>不会继承父级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>的display属性,可以使用display:inherit来继承</code></pre><p>可以到网上查更多的display属性。</p><h2 id="Display-inline-block布局"><a href="#Display-inline-block布局" class="headerlink" title="Display:inline-block布局"></a>Display:inline-block布局</h2><h3 id="1-解释一下display的几个常用的属性值，inline-，-block，-inline-block"><a href="#1-解释一下display的几个常用的属性值，inline-，-block，-inline-block" class="headerlink" title="1.解释一下display的几个常用的属性值，inline ， block， inline-block"></a><strong>1.解释一下display的几个常用的属性值，inline ， block， inline-block</strong></h3><ul><li>inline（行内元素）:<ol><li>使元素变成行内元素，拥有行内元素的特性，即可以与其他行内元素共享一行，不会独占一行. </li><li>不能更改元素的height，width的值，大小由内容撑开. </li><li>可以使用padding上下左右都有效，margin只有left和right产生边距效果，但是top和bottom就不行.</li></ol></li><li>block（块级元素）:<ol><li>使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度. </li><li><em>能够改变元素的height，width的值.</em> </li><li><strong>可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果.</strong></li></ol></li><li>inline-block（融合行内与块级）:<ol><li>结合了inline与block的一些特点，结合了上述inline的第1个特点和block的第2,3个特点.</li><li>用通俗的话讲，就是不独占一行的块级元素。如图:</li></ol></li></ul><p>图一:<br><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5exkbj30bh06qwed.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5exkbj30bh06qwed.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5exkbj30bh06qwed.jpg)"><br>图二：<br><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5f1fwj30cs04cwed.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5f1fwj30cs04cwed.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5f1fwj30cs04cwed.jpg)"></p><p>两个图可以看出，display：inline-block后块级元素能够在同一行显示，有人说这不就像浮动一样吗。没错，display：inline-block的效果几乎和浮动一样，但也有不同，接下来讲一下inline-block和浮动的比较。</p><h3 id="2-inline-block布局-vs-浮动布局"><a href="#2-inline-block布局-vs-浮动布局" class="headerlink" title="2.inline-block布局 vs 浮动布局"></a><strong>2.inline-block布局 vs 浮动布局</strong></h3><h4 id="a-不同之处："><a href="#a-不同之处：" class="headerlink" title="a.不同之处："></a><strong>a.不同之处：</strong></h4><p>对元素设置display：inline-block ，元素不会脱离文本流，而float就会使得元素脱离文本流，且还有父元素高度坍塌的效果</p><h4 id="b-相同之处："><a href="#b-相同之处：" class="headerlink" title="b.相同之处："></a><strong>b.相同之处：</strong></h4><p>能在某程度上达到一样的效果</p><p>　　我们先来看看这两种布局：<br>图一：display：inline-block<br><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5f1fwj30cs04cwed.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5f1fwj30cs04cwed.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5f1fwj30cs04cwed.jpg)"><br>图二：对两个孩子使用float：left，我在上一篇浮动布局讲过，这是父元素会高度坍塌，所以要闭合浮动，对box使用overflow：hidden，效果如下：<br><img src="https://wx3.sinaimg.cn/mw690/006AeIDuly1g9kpe5g6kqj30b903tmx0.jpg" alt="[https://wx3.sinaimg.cn/mw690/006AeIDuly1g9kpe5g6kqj30b903tmx0.jpg](https://wx3.sinaimg.cn/mw690/006AeIDuly1g9kpe5g6kqj30b903tmx0.jpg)"></p><p>&gt;&gt;乍一看两个都能做到几乎相同的效果，（仔细看看display：inline-block中有间隙问题，这个留到下面再讲）</p><h4 id="c-浮动布局不太好的地方："><a href="#c-浮动布局不太好的地方：" class="headerlink" title="　　c.浮动布局不太好的地方："></a>　　<strong>c.浮动布局不太好的地方：</strong></h4><p>参差不齐的现象，我们看一个效果：<br>图三：<br><img src="https://wx4.sinaimg.cn/mw690/006AeIDuly1g9kpe5iql2j30hw067jrd.jpg" alt="[https://wx4.sinaimg.cn/mw690/006AeIDuly1g9kpe5iql2j30hw067jrd.jpg](https://wx4.sinaimg.cn/mw690/006AeIDuly1g9kpe5iql2j30hw067jrd.jpg)"><br>图四：<br><img src="https://wx4.sinaimg.cn/mw690/006AeIDuly1g9kpe5iaj8j30gb06z749.jpg" alt="[https://wx4.sinaimg.cn/mw690/006AeIDuly1g9kpe5iaj8j30gb06z749.jpg](https://wx4.sinaimg.cn/mw690/006AeIDuly1g9kpe5iaj8j30gb06z749.jpg)"><br>&gt;&gt;从图3,4可以看出浮动的局限性在于，若要元素排满一行，换行后还要整齐排列，就要子元素的高度一致才行，不然就会出现图三的效果，而inline-block就不会。</p><h3 id="3-inline-block存在的小问题："><a href="#3-inline-block存在的小问题：" class="headerlink" title="3.inline-block存在的小问题："></a><strong>3.inline-block存在的小问题：</strong></h3><p>　　<strong>a</strong>.上面可以看到用了display:inline-block后，存在间隙问题，间隙为4像素，这个问题产生的原因是换行引起的，因为我们写标签时通常会在标签结束符后顺手打个回车，而回车会产生回车符，回车符相当于空白符，通常情况下，多个连续的空白符会合并成一个空白符，而产生“空白间隙”的真正原因就是这个让我们并不怎么注意的空白符。</p><p>　　<strong>b.</strong>去除空隙的方法：<br>　　1.对父元素添加，{font-size:0}，即将字体大小设为0，那么那个空白符也变成0px，从而消除空隙<br>　　现在这种方法已经可以兼容各种浏览器，以前chrome浏览器是不兼容的<br>图一：<br><img src="https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5k6llj30dh06ga9v.jpg" alt="[https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5k6llj30dh06ga9v.jpg](https://wx1.sinaimg.cn/mw690/006AeIDuly1g9kpe5k6llj30dh06ga9v.jpg)"></p><p>　　<strong>c.</strong>浏览器兼容性：ie6/7是不兼容 display：inline-block的所以要额外处理一下：<br>　　在ie6/7下：<br>　　对于行内元素直接使用{dislplay:inline-block;}<br>　　对于块级元素：需添加{display:inline;zoom:1;}</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结:"></a><strong>4.总结:</strong></h3><p>　　display：inline-block的布局方式和浮动的布局方式，究竟使用哪个，我觉得应该根据实际情况来决定的：<br>　　a.对于横向排列东西来说，我更倾向与使用inline-block来布局，因为这样清晰，也不用再像浮动那样清除浮动，害怕布局混乱等等。<br>　　b.对于浮动布局就用于需要文字环绕的时候，毕竟这才是浮动真正的用武之地，水平排列的是就交给inline-block了。</p><p>作者：Ry-yuan</p><p>转载出处，本文地址：<a href="http://www.cnblogs.com/Ry-yuan/p/6848197.html" target="_blank" rel="noopener">http://www.cnblogs.com/Ry-yuan/p/6848197.html</a></p><h2 id="Position-static-relative-absolute-fixed"><a href="#Position-static-relative-absolute-fixed" class="headerlink" title="Position:static,relative,absolute,fixed"></a>Position:static,relative,absolute,fixed</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>default position是static。</p><h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><p>relative:相对于原先的位置来确定自己的位置。(可移动)</p><p>style=”position:relative; top: ;right:;bottom:;left:;”来控制移动。</p><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p>元素会按照最近的父元素来确定自己的位置。</p><p>即：如果元素在一个容器内，它便根据容器的位置来调整自己的位置；不在容器中的话它就会依据整个文档来调整位置。</p><p>添加absolute后元素会脱离原先的文档流，浮在最上面一层。</p><p>父元素为relative时，absolute的子元素才会相对于父元素定位，否则直接相对于整个html来定位。</p><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><p>相对于浏览器窗口固定，即使滑动视窗，元素也会相对于视窗位置不变。</p><p>与absolute一样，fixed元素也会浮在文档流的最上面一层。</p><h2 id="Shadows-opacity-amp-border-radius"><a href="#Shadows-opacity-amp-border-radius" class="headerlink" title="Shadows,opacity &amp; border radius"></a>Shadows,opacity &amp; border radius</h2><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><p>不透明度 ，范围:0.0-1.0</p><h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h3><p>text-shadow: 1 2 3</p><p>1是水平范围的shadow宽度</p><p>2是垂直方向的</p><p>3 shadow color</p><p>在3的前面还可以加第四个参数控制blur（模糊）半径</p><p>对于图片img可以采用box-shadow，它与text-shadow用法相同。</p><p>用grey作为img的shadow color一般来说效果很好。</p><h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><p>控制border边角的弧度半径</p><p>单位可用px与%</p><p><img src="https://wx2.sinaimg.cn/mw690/006AeIDuly1g9i4hoy6z9j308x04qq2u.jpg" alt="[https://wx2.sinaimg.cn/mw690/006AeIDuly1g9i4hoy6z9j308x04qq2u.jpg](https://wx2.sinaimg.cn/mw690/006AeIDuly1g9i4hoy6z9j308x04qq2u.jpg)"></p><h2 id="Text-amp-Font"><a href="#Text-amp-Font" class="headerlink" title="Text &amp; Font"></a>Text &amp; Font</h2><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>text-decoration:none;</p><p>​                            line-through;    <del>abc</del></p><p>​                            overline;        abc上划线</p><p>​                            underline;     <u>abc</u></p><hr><p>text-transform:capitalize; 每个单词的首字母都大写</p><p>​                            uppercase；所有字母都大写</p><hr><p>text-align：left；</p><p>​                    right；</p><p>​                    center；</p><p>​                    justify；使文本的两端对齐，文本行的左右两端在父元素的内边界上。然后调整单词和字母的间隔，使各行的长度恰好相等。</p><h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3><p>em:设计字体大小时，推荐使用的单位。代表相对于默认字体尺寸的大小</p><p>网页默认字体尺寸为16px</p><hr><p>font-family:字体种类</p><p>​                    :sans-serif;</p><p>​                    :”Times New Roman”,serif; 如果值中有空格就要用引号。</p><p>​                    :Georgia</p><p>​                    :Arial</p><p>选取font-family时可以用google fonts，设置的时候可以多选取几个作为backup，以免某一个不被浏览器显示。</p><hr><p>font-style:italic 斜体</p><p>​                 :oblique 斜体     一些字体只有正常体，用italic没有效果，这时候就要用oblique让没有斜体属性的文字倾斜。</p><p>font-variant:small-caps    除了开头字母是大的，其他字母都变为尺寸更小的大写字母</p><p>font-weight:bold 字体加粗</p><p>font-size:最好用em</p><h3 id="External-Font"><a href="#External-Font" class="headerlink" title="External Font"></a>External Font</h3><p><code>&lt;link&gt;</code>&amp; use font-family</p><h2 id="External-Style-Sheets"><a href="#External-Style-Sheets" class="headerlink" title="External Style Sheets"></a>External Style Sheets</h2><ol><li>inline style: 如<code>&lt;p style=&quot;&quot;&gt;&lt;/p&gt;</code></li><li><code>&lt;style&gt;xxxxx&lt;/style&gt;</code></li><li>external dot css file:<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;xxxx&quot;</code>&gt;</li></ol><p>3的优点是同个.css文件能被多个.html文件引用</p><h2 id="Id-amp-Classs"><a href="#Id-amp-Classs" class="headerlink" title="Id &amp; Classs"></a>Id &amp; Classs</h2><h3 id="Id"><a href="#Id" class="headerlink" title="Id"></a>Id</h3><p>一个元素只能给一个id</p><p>而一个元素可以用多个class</p><p>对css来说id与class差不多，但对于JSP等语言来说，id能做的事情更多。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="CSS-selector"><a href="#CSS-selector" class="headerlink" title="CSS selector"></a>CSS selector</h4><p>*{css style}    则整个html文件都会被选择，css样式会被应用到整个页面。</p><p>h2, h1{css style}    则h2与h1元素都会被选择</p><p>ul&gt;li{css style}    则只有是ul下一级的li元素们才会被选择</p><p>div+p{css style}    选择紧接在div元素之后的p元素们</p><p>h2+a{css style}与h2~a{css style}不同，前者选择同一父元素下的紧接在h2后面的a元素，而后者选择同一父元素下的在h2后面的a元素，不必紧接。</p><p>[attr]{css style}    选择所有具有该属性的元素</p><p>li[title=”lemons”]{css style}    选择所有具有title=”lemons”属性的li元素</p><p>[title *= “lem”]{css style}    选择title属性中包含“lem”子串的元素</p><p>[attribute ^= value]可以同attribute值等于value,或者attribute值以value开头后面跟任意字符的情况匹配;</p><p>[attribute |= value]可以同attribute值等于value,或者attribute值以value开头且后面只能紧跟 “-” 字符的情况配;即[attribute|=value] 这种情况下 value必须是整个单词 或者以value开头且后面只能紧跟 “-” 字符的情况。</p><p>可以说[attribute 丨=value]限定更严格。只要[attribute 丨=value]能匹配到的情况，[attribute ^= value]都能匹配到。 [attribute 丨=value]是[attribute ^= value]的 “子集”。</p><p>如：subtitle-20933 与 subtitle-45459 遇到这种情况[attribute |= value]的作用就发挥出来了。</p><p>input:checked{css style} 选择每个被选中的<code>&lt;input&gt;</code>元素</p><p>​         :focus{css style} 同理</p><p>li:only-child{css style}    只会选择li为唯一子元素的元素</p><p>可以用a:link {}与 :visited{}伪类选择器来自定义链接被访问前与被访问后的css样式。</p><p>如果a元素有id用#id:link{}也可以。</p><h4 id="组合运用："><a href="#组合运用：" class="headerlink" title="组合运用："></a>组合运用：</h4><p>input[type=”checkbox”]:checked{css style}</p><p>则只有type属性为checkbox的input元素在被勾选时才能被选中。</p><p>h2:hover{css style} 鼠标在h2上才会被选择。</p><p>ul&gt;li:first-child {css style}    ul下的第一个li子元素会被选择。</p><p>​        :last-child{css style}    同上</p><p>​        :nth-last-child(num){css style}    ul下的第一级倒数第num个li元素会被选择</p><h4 id="Css-selector-tips"><a href="#Css-selector-tips" class="headerlink" title="Css selector tips:"></a>Css selector tips:</h4><p>如果要设置ul下的first-child li的color为yellow</p><p>ul:first-child {</p><p>color: yellow;</p><p>}这样是没用的。上述css只对ul下嵌套的第一个子ul有效。</p><p>要实现上述效果需这样写：<br>li:first-child {</p><p>color: yellow;</p><p>}</p><h2 id="Selectors-Specificity"><a href="#Selectors-Specificity" class="headerlink" title="Selectors Specificity"></a>Selectors Specificity</h2><p>Note: Specificity is a common reason why your CSS-rules don’t apply to some elements, although you think they should.</p><p>Specificity Hierarchy<br>Every selector has its place in the specificity hierarchy. There are four categories which define the specificity level of a selector:</p><p>Inline styles - An inline style is attached directly to the element to be styled. Example: <code>&lt;h1 style=&quot;color: #ffffff;&quot;&gt;</code>.</p><p>IDs - An ID is a unique identifier for the page elements, such as #navbar.</p><p>Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus etc.</p><p>Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.</p><h3 id="How-to-Calculate-Specificity"><a href="#How-to-Calculate-Specificity" class="headerlink" title="How to Calculate Specificity?"></a>How to Calculate Specificity?</h3><p>Memorize how to calculate specificity!</p><p>Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element.</p><p>来源：<a href="https://www.w3schools.com/css/css_specificity.asp" target="_blank" rel="noopener">https://www.w3schools.com/css/css_specificity.asp</a></p><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><p><img src="https://wx3.sinaimg.cn/mw690/006AeIDuly1g9ip52vvkdj30y60i84al.jpg" alt="[https://wx3.sinaimg.cn/mw690/006AeIDuly1g9ip52vvkdj30y60i84al.jpg](https://wx3.sinaimg.cn/mw690/006AeIDuly1g9ip52vvkdj30y60i84al.jpg)"></p><p><img src="https://wx2.sinaimg.cn/mw690/006AeIDuly1g9ip567l9kj30z70i57ge.jpg" alt="[https://wx2.sinaimg.cn/mw690/006AeIDuly1g9ip567l9kj30z70i57ge.jpg](https://wx2.sinaimg.cn/mw690/006AeIDuly1g9ip567l9kj30z70i57ge.jpg)"></p><p>使元素能动态地响应页面大小。                                                                    </p><p>display:flex;                                                                                                    </p><p>更详细地使用flexbox方法参考以下pdf：</p><p><a href="/pdf/flexboxsheet.pdf">flexbox cheatsheet</a></p><h3 id="Flex-grow-flex-shrink-flex-basis"><a href="#Flex-grow-flex-shrink-flex-basis" class="headerlink" title="Flex-grow,flex-shrink,flex-basis:"></a>Flex-grow,flex-shrink,flex-basis:</h3><p>在flex布局中，父元素在不同宽度下，子元素是如何分配父元素空间的。</p><p>(注意：这三个属性都是在子元素上设置的，下面小编要讲的是父元素，指以flex布局的元素(display:flex))</p><p>小编这里先教一下大家如何快速记住这三个属性：</p><p>首先是   flex-basis  ，basis英文意思是&lt;主要成分&gt;，所以他和width放在一起时,肯定把width干掉，basis遇到width时就会说我才是最主要的成分，你是次要成分，所以见到我的时候你要靠边站。</p><p>其次是   flex-grow，grow英文意思是&lt;扩大，扩展，增加&gt;,这就代表当父元素的宽度大于子元素宽度之和时，并且父元素有剩余，这时，flex-grow就会说我要成长，我要长大，怎么样才能成长呢，当然是分享父元素的空间了。见下面第二个属性的内容</p><p>最后是   flex-shrink， shrink英文意思是收缩，这就代表当父元素的宽度小于子元素宽度之和时，并且超出了父元素的宽度，这时，flex-shrink就会说外面的世界太苦了，我还是回到父亲的怀抱中去吧！因此，flex-shrink就会按照一定的比例进行收缩。见下面第三个属性的内容</p><h4 id="第一个属性：flex-basis"><a href="#第一个属性：flex-basis" class="headerlink" title="第一个属性：flex-basis"></a>第一个属性：flex-basis</h4><p>该属性用来设置元素的宽度，其实，width也可以设置宽度。如果元素上同时设置了width和flex-basis，那么width 的值就会被flex-basis覆盖掉。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>见下图：小编我把宽度设置为width:200px;  flex-basis:300px;结果显示表明子元素.inner应用了属性flex-basis;</p><p><img src="https://img-blog.csdn.net/20180621202401102?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621202401102?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621202401102?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><h4 id="第二个属性：flex-grow"><a href="#第二个属性：flex-grow" class="headerlink" title="第二个属性：flex-grow"></a>第二个属性：flex-grow</h4><p>该属性用来设置当父元素的宽度大于所有子元素的宽度的和时（即父元素会有剩余空间），子元素如何分配父元素的剩余空间。 flex-grow的默认值为0，意思是该元素不索取父元素的剩余空间，如果值大于0，表示索取。值越大，索取的越厉害。</p><p> 举个例子: 父元素宽400px，有两个子元素：A和B。A宽为100px，B宽为200px。 则空余空间为 400-（100+200）= 100px。 如果A，B都不索取剩余空间，则有100px的空余空间。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span><span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.inner1</span></span><span class="token punctuation">{</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>见下图：</p><p><img src="https://img-blog.csdn.net/20180621203513551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621203513551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621203513551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><p> 如果A索取剩余空间:设置flex-grow为1，B不索取。则最终A的大小为 自身宽度（100px）+ 剩余空间的宽度（100px）= 200px 。</p><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>            <span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.inner1</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>见下图：</p><p><img src="https://img-blog.csdn.net/20180621203737948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621203737948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621203737948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><p>如果A，B都设索取剩余空间，A设置flex-grow为1，B设置flex-grow为2。则最终A的大小为 自身宽度（100px）+ A获得的剩余空间的宽度（100px (1/(1+2))）,最终B的大小为 自身宽度（200px）+ B获得的剩余空间的宽度（100px (2/(1+2))）(这里呢小编只给了公式，小伙伴们可以自己去算一下)</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>            <span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.inner1</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>            <span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>见下图：</p><p><img src="https://img-blog.csdn.net/20180621203513551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621203513551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621203513551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><h4 id="第三个属性：flex-shrink"><a href="#第三个属性：flex-shrink" class="headerlink" title="第三个属性：flex-shrink"></a>第三个属性：flex-shrink</h4><p>该属性用来设置，当父元素的宽度小于所有子元素的宽度的和时（即子元素会超出父元素），子元素如何缩小自己的宽度的。 flex-shrink的默认值为1，当父元素的宽度小于所有子元素的宽度的和时，子元素的宽度会减小。值越大，减小的越厉害。如果值为0，表示不减小。</p><p> 举个例子: 父元素宽400px，有两子元素：A和B。A宽为200px，B宽为300px。 则A，B总共超出父元素的宽度为(200+300)- 400 = 100px。 如果A，B都不减小宽度，即都设置flex-shrink为0，则会有100px的宽度超出父元素。 </p><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span>        <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>         <span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.inner1</span></span><span class="token punctuation">{</span>        <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>见下图：</p><p><img src="https://img-blog.csdn.net/20180621204844467?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621204844467?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621204844467?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><p>如果A不减小宽度:设置flex-shrink为0，B减小。则最终B的大小为 自身宽度(300px)- 总共超出父元素的宽度(100px)= 200px </p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>             <span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.inner1</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>            <span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>见下图：</p><p><img src="https://img-blog.csdn.net/20180621205056474?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621205056474?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621205056474?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><p>如果A，B都减小宽度，A设置flex-shirk为3，B设置flex-shirk为2。则最终A的大小为 自身宽度(200px)- A减小的宽度(100px * (200px * 3/(200 * 3 + 300 * 2))) = 150px,最终B的大小为 自身宽度(300px)- B减小的宽度(100px * (300px * 2/(200 * 3 + 300 * 2))) = 250px</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.inner</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>             <span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.inner1</span></span><span class="token punctuation">{</span>            <span class="token property">flex-basis</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>            <span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>见下图：</p><p><img src="https://img-blog.csdn.net/20180621205513272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/20180621205513272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180621205513272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><p><img src="https://img-blog.csdn.net/2018062120552815?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="[https://img-blog.csdn.net/2018062120552815?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/2018062120552815?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MDU4NzE0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"></p><p>这里小编明确一点，flex是flex-grow，flex-shrink,  flex-basis  (注意小编写的顺序)缩写形式，大家可以记一下下面的缩写规则：</p><p>如：flex 取值为 none，则计算值为 0 0 auto，如下是等同的：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">当 flex取值为 auto，则计算值为 1 1 auto，如下是等同的：<span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-2</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-2</span> </span><span class="token punctuation">{</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当 flex取值为两个非负数字，则分别视为 flex-grow和 flex-shrink的值，flex-basis取 0%，如下是等同的：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">0%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当 flex取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow和 flex-basis的值，flex-shrink取 1，如下是等同的：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span><span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2333</span> <span class="token number">3222</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">2333</span><span class="token punctuation">;</span>    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">3222</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>————————————————<br>版权声明：本文为CSDN博主「wxk_前端开发」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/m0_37058714/article/details/80765562" target="_blank" rel="noopener">https://blog.csdn.net/m0_37058714/article/details/80765562</a></p><h3 id="Flexbox-tips"><a href="#Flexbox-tips" class="headerlink" title="Flexbox tips:"></a>Flexbox tips:</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">order</span><span class="token punctuation">:</span><span class="token number">3</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">order</span><span class="token punctuation">:</span><span class="token number">1</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">order</span><span class="token punctuation">:</span><span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>结果:B C A    在flexbox中的flexitem可以用order属性排序。</code></pre><p>view-port                                                                                                                         </p><p>view-height:vh</p><p>view-width:vw                                                                                                                    </p><p>​    如设置width:70vw则该元素的宽度会一直为视窗宽度的70%</p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p><img src="https://wx4.sinaimg.cn/mw690/006AeIDuly1g9js3pje8uj30y40hf46e.jpg" alt="[https://wx4.sinaimg.cn/mw690/006AeIDuly1g9js3pje8uj30y40hf46e.jpg](https://wx4.sinaimg.cn/mw690/006AeIDuly1g9js3pje8uj30y40hf46e.jpg)"></p><p><img src="https://wx2.sinaimg.cn/mw690/006AeIDuly1g9js398m9pj30yb0hxamk.jpg" alt="[https://wx2.sinaimg.cn/mw690/006AeIDuly1g9js398m9pj30yb0hxamk.jpg](https://wx2.sinaimg.cn/mw690/006AeIDuly1g9js398m9pj30yb0hxamk.jpg)"></p><h3 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns,grid-template-rows"></a>grid-template-columns,grid-template-rows</h3><p>容器指定了网格布局以后，接着就要划分行和列。</p><p>grid-template-columns:定义每一列的列宽</p><p>grid-template-rows属性定义每一行的行高。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://jsbin.com/qiginur/edit?css,output" target="_blank" rel="noopener">上面代码</a>指定了一个三行三列的网格，列宽和行高都是<code>100px</code>。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png)"></p><p>除了使用绝对单位，也可以使用百分比。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="justify-content-属性，-align-content-属性，-place-content-属性"><a href="#justify-content-属性，-align-content-属性，-place-content-属性" class="headerlink" title="justify-content 属性， align-content 属性， place-content 属性"></a>justify-content 属性， align-content 属性， place-content 属性</h3><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></blockquote><p>这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以<code>justify-content</code>属性为例，<code>align-content</code>属性的图完全一样，只是将水平方向改成垂直方向。）</p><blockquote><ul><li>start - 对齐容器的起始边框。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032519.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032519.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032519.png)"></p><blockquote><ul><li>end - 对齐容器的结束边框。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032518.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032518.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032518.png)"></p><blockquote><ul><li>center - 容器内部居中。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032520.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032520.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032520.png)"></p><blockquote><ul><li>stretch - 项目大小没有指定时，拉伸占据整个网格容器。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032521.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032521.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032521.png)"></p><blockquote><ul><li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png)"></p><blockquote><ul><li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png)"></p><blockquote><ul><li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li></ul></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png)"></p><p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token property">place-content</span><span class="token punctuation">:</span> &lt;align-content> &lt;justify-content></code></pre></blockquote><p>下面是一个例子。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token property">place-content</span><span class="token punctuation">:</span> space-around space-evenly<span class="token punctuation">;</span></code></pre></blockquote><p>如果省略第二个值，浏览器就会假定第二个值等于第一个值。</p><h3 id="grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性"><a href="#grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性" class="headerlink" title="grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性"></a>grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性</h3><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p><a href="https://jsbin.com/mezufab/edit?css,output" target="_blank" rel="noopener">上面代码</a>中，<code>grid-row-gap</code>用于设置行间距，<code>grid-column-gap</code>用于设置列间距。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png)"></p><p><code>grid-gap</code>属性是<code>grid-column-gap</code>和<code>grid-row-gap</code>的合并简写形式，语法如下。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token property">grid-gap</span><span class="token punctuation">:</span> &lt;grid-row-gap> &lt;grid-column-gap><span class="token punctuation">;</span></code></pre></blockquote><p>因此，上面一段 CSS 代码等同于下面的代码。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>如果<code>grid-gap</code>省略了第二个值，浏览器认为第二个值等于第一个值。</p><h3 id="grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性"><a href="#grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性" class="headerlink" title="grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性"></a>grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性</h3><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p><blockquote><ul><li>grid-column-start属性：左边框所在的垂直网格线</li><li>grid-column-end属性：右边框所在的垂直网格线</li><li><code>grid-row-start</code>属性：上边框所在的水平网格线</li><li>grid-row-end属性：下边框所在的水平网格线</li></ul></blockquote><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p><a href="https://jsbin.com/yukobuf/edit?css,output" target="_blank" rel="noopener">上面代码</a>指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png)"></p><p>上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。</p><p>除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的<code>grid-auto-flow</code>属性决定，这个属性的默认值是<code>row</code>，因此会”先行后列”进行排列。读者可以把这个属性的值分别改成<code>column</code>、<code>row dense</code>和<code>column dense</code>，看看其他项目的位置发生了怎样的变化。</p><p><a href="https://jsbin.com/nagobey/edit?html,css,output" target="_blank" rel="noopener">下面的例子</a>是指定四个边框位置的效果。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032527.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032527.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032527.png)"></p><p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> header-end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>上面代码中，左边框和右边框的位置，都指定为网格线的名字。</p><p>这四个属性的值还可以使用<code>span</code>关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p><a href="https://jsbin.com/hehumay/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>表示，1号项目的左边框距离右边框跨越2个网格。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png)"></p><p>这与<a href="https://jsbin.com/mujihib/edit?html,css,output" target="_blank" rel="noopener">下面的代码</a>效果完全一样。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>使用这四个属性，如果产生了项目的重叠，则使用<code>z-index</code>属性指定项目的重叠顺序。</p><h3 id="grid-column-属性，-grid-row-属性"><a href="#grid-column-属性，-grid-row-属性" class="headerlink" title="grid-column 属性， grid-row 属性"></a>grid-column 属性， grid-row 属性</h3><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span>  / <span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span>  / <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>下面是一个例子。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>上面代码中，项目<code>item-1</code>占据第一行，从第一根列线到第三根列线。</p><p>这两个属性之中，也可以使用<code>span</code>关键字，表示跨越多少个网格。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p><a href="https://jsbin.com/volugow/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>中，项目<code>item-1</code>占据的区域，包括第一行 + 第二行、第一列 + 第二列。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032529.png" alt="[https://www.wangbase.com/blogimg/asset/201903/bg2019032529.png](https://www.wangbase.com/blogimg/asset/201903/bg2019032529.png)"></p><p>斜杠以及后面的部分可以省略，默认跨越一个网格。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>上面代码中，项目<code>item-1</code>占据左上角第一个网格。</p><h3 id="grid-area-属性"><a href="#grid-area-属性" class="headerlink" title="grid-area 属性"></a>grid-area 属性</h3><p><code>grid-area</code>属性指定项目放在哪一个区域。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p><a href="https://jsbin.com/qokexob/edit?css,output" target="_blank" rel="noopener">上面代码</a>中，1号项目位于<code>e</code>区域，效果如下图。</p><p><img src="https://wx2.sinaimg.cn/mw690/006AeIDuly1g9jt6wxf3pj30ar0awq2u.jpg" alt="[https://wx2.sinaimg.cn/mw690/006AeIDuly1g9jt6wxf3pj30ar0awq2u.jpg](https://wx2.sinaimg.cn/mw690/006AeIDuly1g9jt6wxf3pj30ar0awq2u.jpg)"></p><p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> &lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><p>下面是一个<a href="https://jsbin.com/duyafez/edit?css,output" target="_blank" rel="noopener">例子</a>。</p><blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">3</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="Grid-tips"><a href="#Grid-tips" class="headerlink" title="Grid tips:"></a>Grid tips:</h3><p>注意，设为网格布局以后，容器子元素（项目）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</p><blockquote><p>根据最新标准，上面三个属性名的grid-前缀已经删除，grid-column-gap和grid-row-gap写成column-gap和row-gap，grid-gap写成gap。</p></blockquote><p>以上摘抄自<a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><p>更详细的grid信息访问:<a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>如</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> change-color</span><span class="token punctuation">{</span>    <span class="token selector">from</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span>salmon<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">to</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">然后在选择器内:例如<span class="token pseudo-class">:box-animation</span></span><span class="token punctuation">{</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span>change-color<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span><span class="token number">4</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span>上述效果会使用了该样式的元素的背景颜色在<span class="token number">4</span>s内由salmon变为lightblue，一旦完成这一动画会立马变回salmon</code></pre><p>animation 属性是一个简写属性，用于设置六个动画属性：</p><ul><li>animation-name                        规定需要绑定到选择器的 keyframe 名称。</li><li>animation-duration                   规定完成动画所花费的时间，以秒或毫秒计。</li><li>animation-timing-function       规定动画的速度曲线。</li><li>animation-delay                        规定在动画开始之前的延迟。</li><li>animation-iteration-count       规定动画应该播放的次数。</li><li>animation-direction                  规定是否应该轮流反向播放动画。</li></ul><table><thead><tr><th align="left">默认值：</th><th>none 0 ease 0 1 normal</th></tr></thead><tbody><tr><td align="left">继承性：</td><td>no</td></tr><tr><td align="left">版本：</td><td>CSS3</td></tr><tr><td align="left">JavaScript 语法：</td><td><em>object</em>.style.animation=”mymove 5s infinite”</td></tr></tbody></table><p>语法：</p><pre class=" language-css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction<span class="token punctuation">;</span></code></pre><p>animation-iteration-count:infinite;    一直循环动画</p><p>​                                             :3；    播放动画三次。</p><h3 id="Animation-tips"><a href="#Animation-tips" class="headerlink" title="Animation tips:"></a>Animation tips:</h3><p>要始终注意规定animation-duration属性否则默认时长为0不会播放动画。</p><p>还可以:</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> change-color</span><span class="token punctuation">{</span>    <span class="token selector">0%</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span>salmon<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector">10%</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">...</span>    100%</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>用百分数来控制动画也是可行的。</code></pre><p>animation-delay:2s;    则会延迟2s动画开始的时间(可取负值)。</p><hr><p>animation-timing-function</p><table><thead><tr><th>linear</th><th>动画从头到尾的速度是相同的。</th></tr></thead><tbody><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table><hr><p>animation-direction:normal;                            默认值。动画按正常播放。</p><p>​                                     reverse;                           动画反向播放。</p><p>​                                    alternate;                        动画在奇数次（1、3、5…）正向播放,在偶数次（2、4、6…）反向播放。</p><p>​                                    alternate-reverse;         动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。</p><p>​                                    inherit;                            从父元素继承该属性。</p><h2 id="Transition-Property"><a href="#Transition-Property" class="headerlink" title="Transition Property"></a>Transition Property</h2><p>用伪类选择器时适合用这个属性来创造更舒适的非线性动画。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>transition: <em>property duration timing-function delay</em>;</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em><a href="https://www.runoob.com/cssref/css3-pr-transition-property.html" target="_blank" rel="noopener">transition-property</a></em></td><td align="left">指定CSS属性的name，transition效果</td></tr><tr><td align="left"><em><a href="https://www.runoob.com/cssref/css3-pr-transition-duration.html" target="_blank" rel="noopener">transition-duration</a></em></td><td align="left">transition效果需要指定多少秒或毫秒才能完成</td></tr><tr><td align="left"><em><a href="https://www.runoob.com/cssref/css3-pr-transition-timing-function.html" target="_blank" rel="noopener">transition-timing-function</a></em></td><td align="left">指定transition效果的转速曲线</td></tr><tr><td align="left"><em><a href="https://www.runoob.com/cssref/css3-pr-transition-delay.html" target="_blank" rel="noopener">transition-delay</a></em></td><td align="left">定义transition效果开始的时候</td></tr></tbody></table><table><thead><tr><th align="left">默认值：</th><th>all 0 ease 0</th></tr></thead><tbody><tr><td align="left">继承：</td><td>no</td></tr><tr><td align="left">版本：</td><td>CSS3</td></tr><tr><td align="left">JavaScript 语法：</td><td><em>object</em>.style.transition=”width 2s”</td></tr></tbody></table><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition- timing-function"></a>transition- timing-function</h3><p>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>);</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td align="left">ease</td><td align="left">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td align="left">ease-in</td><td align="left">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td align="left">ease-out</td><td align="left">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td align="left">ease-in-out</td><td align="left">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td align="left">cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="left">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table><h3 id="transition-tips"><a href="#transition-tips" class="headerlink" title="transition tips:"></a>transition tips:</h3><p> 始终指定transition-duration属性，否则持续时间为0，transition不会有任何效果。</p><h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><table><thead><tr><th align="left">默认值：</th><th>none</th></tr></thead><tbody><tr><td align="left">继承性：</td><td>no</td></tr><tr><td align="left">版本：</td><td>CSS3</td></tr><tr><td align="left">JavaScript 语法：</td><td><em>object</em>.style.transform=”rotate(7deg)”</td></tr></tbody></table><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> none|transform-functions<span class="token punctuation">;</span></code></pre><h3 id="transform-functions："><a href="#transform-functions：" class="headerlink" title="transform-functions："></a>transform-functions：</h3><h4 id="移动translate"><a href="#移动translate" class="headerlink" title="移动translate"></a>移动translate</h4><p>我们分为三种情况：translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）；translateX(x)仅水平方向移动（X轴移动）；translateY(Y)仅垂直方向移动（Y轴移动），具体使用方法如下：</p><p>1、translate(<code>&lt;translation-value&gt;, &lt;translation-value&gt;</code>) ：通过矢量[tx, ty]指定一个2D translation，tx 是第一个过渡值参数，ty 是第二个过渡值参数选项。如果 未被提供，则ty以 0 作为其值。也就是translate(x,y),它表示对象进行平移，按照设定的x,y参数值,当值为负数时，反方向移动物体，其基点默认为元素 中心点，也可以根据transform-origin进行改变基点。如transform:translate(100px,20px):</p><p><img src="http://cdn.w3cplus.com/cdn/farfuture/cpg1_ccfmJB3YCskfTY4wafGLRW_PqZ_hmTATY0bLhI/mtime:1341237813/sites/default/files/translate-x-y.png" alt="[http://cdn.w3cplus.com/cdn/farfuture/cpg1_ccfmJB3YCskfTY4wafGLRW_PqZ_hmTATY0bLhI/mtime:1341237813/sites/default/files/translate-x-y.png](http://cdn.w3cplus.com/cdn/farfuture/cpg1_ccfmJB3YCskfTY4wafGLRW_PqZ_hmTATY0bLhI/mtime:1341237813/sites/default/files/translate-x-y.png)"></p><p>2、translateX(<code>&lt;translation-value&gt;</code>) ： 通过给定一个X方向上的数目指定一个translation。只向x轴进行移动元素，同样其基点是元素中心点，也可以根据transform-origin改变基点位置。如：transform:translateX(100px):</p><p><img src="http://cdn.w3cplus.com/cdn/farfuture/xmWvEQJv1-SDS31NWYdMZCm5Y-mFhmVeov3byX8xQGM/mtime:1341237813/sites/default/files/translate-x.png" alt="[http://cdn.w3cplus.com/cdn/farfuture/xmWvEQJv1-SDS31NWYdMZCm5Y-mFhmVeov3byX8xQGM/mtime:1341237813/sites/default/files/translate-x.png](http://cdn.w3cplus.com/cdn/farfuture/xmWvEQJv1-SDS31NWYdMZCm5Y-mFhmVeov3byX8xQGM/mtime:1341237813/sites/default/files/translate-x.png)"></p><p>3、translateY(<code>&lt;translation-value&gt;</code>) ：通过给定Y方向的数目指定一个translation。只向Y轴进行移动，基点在元素心点，可以通过transform-origin改变基点位置。如：transform:translateY(20px):</p><h4 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale"></a><strong>缩放scale</strong></h4><p>缩放scale和移动translate是极其相似，他也具有三种情况：scale(x,y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）；scaleX(x)元素仅水平方向缩放（X轴缩放）；scaleY(y)元素仅垂直方向缩放（Y轴缩放），但它们具有相同的缩放中心点和基数，其中心点就是元素的中心位置，缩放基数为1，如果其值大于1元素就放大，反之其值小于1，元素缩小。下面我们具体来看看这三种情况具体使用方法：</p><p>1、scale(<code>&lt;number&gt;[, &lt;number&gt;]</code>)：提供执行[sx,sy]缩放矢量的两个参数指定一个2D scale（2D缩放）。如果第二个参数未提供，则取与第一个参数一样的值。scale(X,Y)是用于对元素进行缩放，可以通过transform-origin对元素的基点进行设置，同样基点在元素中心位置；基中X表示水平方向缩放的倍数，Y表示垂直方向的缩放倍数，而Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的。并以X为准。如：transform:scale(2,1.5):</p><p><img src="http://cdn.w3cplus.com/cdn/farfuture/OVgmVMi2MDjTG8KSooxaZIJEzSbTqHPuD3lgcM1Ahvk/mtime:1341237776/sites/default/files/scale-x-y.png" alt="[http://cdn.w3cplus.com/cdn/farfuture/OVgmVMi2MDjTG8KSooxaZIJEzSbTqHPuD3lgcM1Ahvk/mtime:1341237776/sites/default/files/scale-x-y.png](http://cdn.w3cplus.com/cdn/farfuture/OVgmVMi2MDjTG8KSooxaZIJEzSbTqHPuD3lgcM1Ahvk/mtime:1341237776/sites/default/files/scale-x-y.png)"></p><p>2、scaleX(<code>&lt;number&gt;</code>) ： 使用 [sx,1] 缩放矢量执行缩放操作，sx为所需参数。scaleX表示元素只在X轴(水平方向)缩放元素，他的默认值是(1,1)，其基点一样是在元素的中心位置，我们同样是通过transform-origin来改变元素的基点。如：transform:scaleX(2):</p><p><img src="http://cdn2.w3cplus.com/cdn/farfuture/GwlGkCboT7jfuw8Y_EtqY07GMcDUMNEt4Y2kj61FcD8/mtime:1341237776/sites/default/files/scale-x.png" alt="[http://cdn2.w3cplus.com/cdn/farfuture/GwlGkCboT7jfuw8Y_EtqY07GMcDUMNEt4Y2kj61FcD8/mtime:1341237776/sites/default/files/scale-x.png](http://cdn2.w3cplus.com/cdn/farfuture/GwlGkCboT7jfuw8Y_EtqY07GMcDUMNEt4Y2kj61FcD8/mtime:1341237776/sites/default/files/scale-x.png)"></p><p>3、scaleY(<code>&lt;number&gt;</code>) ： 使用 [1,sy] 缩放矢量执行缩放操作，sy为所需参数。scaleY表示元素只在Y轴（垂直方向）缩放元素，其基点同样是在元素中心位置，可以通过transform-origin来改变元素的基点。如transform:scaleY(2):</p><p><img src="http://cdn1.w3cplus.com/cdn/farfuture/-h73QRWTLl4beHBNxbo8IxCBPalKqtRRoAyaGAksQW8/mtime:1341237776/sites/default/files/scale-y.png" alt="[http://cdn1.w3cplus.com/cdn/farfuture/-h73QRWTLl4beHBNxbo8IxCBPalKqtRRoAyaGAksQW8/mtime:1341237776/sites/default/files/scale-y.png](http://cdn1.w3cplus.com/cdn/farfuture/-h73QRWTLl4beHBNxbo8IxCBPalKqtRRoAyaGAksQW8/mtime:1341237776/sites/default/files/scale-y.png)"></p><h4 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a><strong>旋转rotate</strong></h4><p>rotate(<code>&lt;angle&gt;</code>) ：通过指定的角度参数对原元素指定一个2D rotation（2D 旋转），需先有transform-origin属性的定义。transform-origin定义的是旋转的基点，其中angle是指旋转角度，如果设置的值为正数表示顺时针旋转，如果设置的值为负数，则表示逆时针旋转。如：transform:rotate(30deg):</p><p><img src="http://cdn1.w3cplus.com/cdn/farfuture/z_h-BB20wAjCAy2velbYrqK8CVIUstAOR_uOb_5RMkM/mtime:1341237776/sites/default/files/rotate.png" alt="[http://cdn1.w3cplus.com/cdn/farfuture/z_h-BB20wAjCAy2velbYrqK8CVIUstAOR_uOb_5RMkM/mtime:1341237776/sites/default/files/rotate.png](http://cdn1.w3cplus.com/cdn/farfuture/z_h-BB20wAjCAy2velbYrqK8CVIUstAOR_uOb_5RMkM/mtime:1341237776/sites/default/files/rotate.png)"></p><h4 id="扭曲skew"><a href="#扭曲skew" class="headerlink" title="扭曲skew"></a><strong>扭曲skew</strong></h4><p>扭曲skew和translate、scale一样同样具有三种情况：skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形），具体使用如下：</p><p>1、skew(<code>&lt;angle&gt; [, &lt;angle&gt;</code>]) ：X轴Y轴上的skew transformation（斜切变换）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。skew是用来对元素进行扭曲变行，第一个参数是水平方向扭曲角度，第二个参数是垂直方向扭曲角度。其中第二个参数是可选参数，如果没有设置第二个参数，那么Y轴为0deg。同样是以元素中心为基点，我们也可以通过transform-origin来改变元素的基点位置。如：transform:skew(30deg,10deg):</p><p><img src="http://cdn1.w3cplus.com/cdn/farfuture/L_YIhJ0lb-t2WzPPcxliu82nnLN0OL7BTm6Rao3X7_0/mtime:1341237780/sites/default/files/skew-x-y.png" alt="[http://cdn1.w3cplus.com/cdn/farfuture/L_YIhJ0lb-t2WzPPcxliu82nnLN0OL7BTm6Rao3X7_0/mtime:1341237780/sites/default/files/skew-x-y.png](http://cdn1.w3cplus.com/cdn/farfuture/L_YIhJ0lb-t2WzPPcxliu82nnLN0OL7BTm6Rao3X7_0/mtime:1341237780/sites/default/files/skew-x-y.png)"></p><p>2、skewX(<code>&lt;angle&gt;</code>) ： 按给定的角度沿X轴指定一个skew transformation（斜切变换）。skewX是使元素以其中心为基点，并在水平方向（X轴）进行扭曲变行，同样可以通过transform-origin来改变元素的基点。如：transform:skewX(30deg)</p><p><img src="http://cdn1.w3cplus.com/cdn/farfuture/JnUewTlzfSZsJhlDYUuPiVXpM6wuagEgpFkSorwtk6k/mtime:1341237780/sites/default/files/skew-x.png" alt="[http://cdn1.w3cplus.com/cdn/farfuture/JnUewTlzfSZsJhlDYUuPiVXpM6wuagEgpFkSorwtk6k/mtime:1341237780/sites/default/files/skew-x.png](http://cdn1.w3cplus.com/cdn/farfuture/JnUewTlzfSZsJhlDYUuPiVXpM6wuagEgpFkSorwtk6k/mtime:1341237780/sites/default/files/skew-x.png)"></p><p>3、skewY(<code>&lt;angle&gt;</code>) ： 按给定的角度沿Y轴指定一个skew transformation（斜切变换）。skewY是用来设置元素以其中心为基点并按给定的角度在垂直方向（Y轴）扭曲变形。同样我们可以通过transform-origin来改变元素的基点。如：transform:skewY（10deg）</p><p><img src="http://cdn.w3cplus.com/cdn/farfuture/NEOscxx3CZUOpk6R3GBgzSEbkZg8OcC5WfrKdjnko4k/mtime:1341237781/sites/default/files/skew-y.png" alt="[http://cdn.w3cplus.com/cdn/farfuture/NEOscxx3CZUOpk6R3GBgzSEbkZg8OcC5WfrKdjnko4k/mtime:1341237781/sites/default/files/skew-y.png](http://cdn.w3cplus.com/cdn/farfuture/NEOscxx3CZUOpk6R3GBgzSEbkZg8OcC5WfrKdjnko4k/mtime:1341237781/sites/default/files/skew-y.png)"></p><p>skew的图中xy轴是错的，但方法是对的，主要理解扭曲的原理。</p><h4 id="矩阵matrix"><a href="#矩阵matrix" class="headerlink" title="矩阵matrix"></a>矩阵matrix</h4><p>matrix(<code>&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;</code>) ： 以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a b c d e f]变换矩阵。就是基于水平方向（X轴）和垂直方向（Y轴）重新定位元素,此属性值使用涉及到数学中的矩阵。更详细的矩阵资料访问:<a href="[https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%e7%9f%a9%e9%98%b5/](https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/)"><a href="https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%e7%9f%a9%e9%98%b5/</a></a></p><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><h3 id="css中link和import区别"><a href="#css中link和import区别" class="headerlink" title="css中link和import区别:"></a>css中link和import区别:</h3><ol><li>link属于html标签，而import是css提供的。</li><li>页面被加载的时候，link会同时被加载，而import引用的css会等到页面被加载完成后加载</li><li>import只在IE5以上才能识别，而link是html标签无兼容问题。</li><li>link方式的样式权重高于import的权重。</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在.css文件中:@import”name of other css file”</p><h2 id="Browser-support"><a href="#Browser-support" class="headerlink" title="Browser support"></a>Browser support</h2><p>网页要兼容多种类的浏览器，可以到网上查CSS Browser Support Reference</p><p>如<a href="https://www.w3schools.com/cssref/css3_browsersupport.asp" target="_blank" rel="noopener">https://www.w3schools.com/cssref/css3_browsersupport.asp</a></p><h2 id="Css-Framework"><a href="#Css-Framework" class="headerlink" title="Css Framework"></a>Css Framework</h2><p>download file or use CDN    如bootstrap</p><h2 id="参考的视频"><a href="#参考的视频" class="headerlink" title="参考的视频:"></a>参考的视频:</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/WZ2uqGkHoR0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/1Rs2ND1ryYc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2019/11/16/html-de-zhi-shi-chu-bei/"/>
      <url>/2019/11/16/html-de-zhi-shi-chu-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h1><h2 id="1-结构："><a href="#1-结构：" class="headerlink" title="1.结构："></a>1.结构：</h2><p>​    </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>        声明文档类型 - document type<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    主要用于声明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    存放主要内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>​            </p><h2 id="2-标签-tags"><a href="#2-标签-tags" class="headerlink" title="2.标签 - tags"></a>2.标签 - tags</h2><p>​        </p><pre class=" language-html"><code class="language-html">双标签：                            单标签：single tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span> break 空行   ...                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span> horizontal rule 水平分割线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">></span></span>    使tag内的字体变大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>    下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span> 上标注释:comment<span class="token comment" spellcheck="true">&lt;!-- comment --></span></code></pre><h2 id="3-Styles-amp-colors"><a href="#3-Styles-amp-colors" class="headerlink" title="3.Styles &amp; colors"></a>3.Styles &amp; colors</h2><pre class=" language-html"><code class="language-html">css: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xx</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xx</span><span class="token punctuation">></span></span>具体的颜色名称或者数值可以到网上查询颜色表</code></pre><h2 id="4-Layout-pages"><a href="#4-Layout-pages" class="headerlink" title="4.Layout pages"></a>4.Layout pages</h2><pre class=" language-html"><code class="language-html">一般网站的3个sections:从顶部往下依次是:header,main,foot三个区域一般来说网站都会这样配置:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span> 导航条tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span> 文章tag    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>     section tag与article tag搭配使用效果更好        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>            content        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foot</span><span class="token punctuation">></span></span>    脚注<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        这种使用方式并非必须，但在一般情况下是最好的选择。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>            content        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>    通常用于放广告（与核心内容无关）</code></pre><h2 id="html-body-width-100-height-100-的解释"><a href="#html-body-width-100-height-100-的解释" class="headerlink" title="html,body{ width: 100%;height: 100%;}的解释"></a>html,body{ width: 100%;height: 100%;}的解释</h2><p>没有设置body的宽高，所以它的高度由所包含的元素高度决定，而它所包含的元素高度没有达到撑满屏幕的高度，所以显示出body的高度没有撑满屏幕， body 的 display 为 block。</p><p>按道理，子元素百分比是以父元素为标准，那么问题来了，html有父元素吗？</p><p>html{ width: 100%;height: 100%;}拿谁的宽高？</p><p>经过测试，是当前浏览器窗口的大小</p><p>宽度100%不用写，可以继承，但是如果不写height,就会得不到可视区域的高度</p><h2 id="5-Links"><a href="#5-Links" class="headerlink" title="5.Links:"></a>5.Links:</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> href:Hypertext Reference<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>默认在本页打开，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>在新页面打开href中开头若不加https/http则默认使用relative url</code></pre><h2 id="6-Images"><a href="#6-Images" class="headerlink" title="6.Images:"></a>6.Images:</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> single tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>有时候图片有大小问题，就可以使用width/height属性控制img缩放Pixel不是一个绝对的长度，只是相对于屏幕而言若只设置width/height,则浏览器会依据原先的长宽比来缩放图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>可以把链接加在图像上</code></pre><h2 id="7-Videos"><a href="#7-Videos" class="headerlink" title="7.Videos"></a>7.Videos</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>若无controls参数则视频不能播放，无进度条组件缩放video的方法与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span>一样可以用poster="url"来设置video的thumbnail(预览图)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>自动播放但有些高版本浏览器须静音后才能自动播放<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>循环播放</code></pre><h2 id="8-Lists"><a href="#8-Lists" class="headerlink" title="8.Lists"></a>8.Lists</h2><pre class=" language-html"><code class="language-html">unorder list:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    .xxxxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            .xxxxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            .xxxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>order list:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>                    1 xxxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            2 xxxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            3 xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            a xxxx                        b xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                    c xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            A xxxx                        B xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                    C xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>I<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            I xxxx                        II xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                    III xxxxtype="i"同理list可以嵌套:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>I<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>还有一种description lists:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        dt    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>          dd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>dd中开头加"-"效果会更好  dt                        -dt</code></pre><h2 id="9-Tables"><a href="#9-Tables" class="headerlink" title="9.Tables"></a>9.Tables</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    table row        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> table data    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> table head        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>可以在table的第一行定义th<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span> caption中可以加table的说明    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>与<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>能让阅读html的人从html角度看表格        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    更容易            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>colspan: column span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>该行将占据2列的width</code></pre><h2 id="10-Div-amp-Span"><a href="#10-Div-amp-Span" class="headerlink" title="10.Div &amp; Span"></a>10.Div &amp; Span</h2><pre class=" language-html"><code class="language-html">containers in HTMLtwo basic ways of HTML display:Block &amp; inlineBlock elements:占据一整行inline elements:占据自身的宽度Span: inline container<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>s1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>s2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        s1 s2Div:block container<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>d1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>d2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        d1 d2</code></pre><h2 id="11-Input-amp-Form"><a href="#11-Input-amp-Form" class="headerlink" title="11.Input &amp; Form"></a>11.Input &amp; Form</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>type="password"type="date"type="email"type="range"type="file"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 有多个小方框可以被同时选中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    同一组只能有一个小圆框被选中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>可以到网上查询所有的input的type值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>value的值作为input的默认值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里可以放默认值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>Form主要用于组织input</code></pre><h2 id="12-iFrame"><a href="#12-iFrame" class="headerlink" title="12.iFrame"></a>12.iFrame</h2><p>iFrame的功能是嵌入其他网站，但有些网站出于流量与安全的角度考虑就不能被使用。如亚马逊购物网。</p><h2 id="13-Meta-tag"><a href="#13-Meta-tag" class="headerlink" title="13.Meta tag"></a>13.Meta tag</h2><pre class=" language-html"><code class="language-html">meta data:data about dataeg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 能使网页自适应浏览器窗口</code></pre><iframe width="560" height="315" src="https://www.youtube.com/embed/pQN-pnXPaVg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
